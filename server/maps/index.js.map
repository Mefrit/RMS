{"version":3,"sources":["../../source/nodeserver/index.ts"],"names":[],"mappings":"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","file":"../index.js","sourcesContent":["import * as express from \"express\";\r\nimport * as session from \"express-session\";\r\nimport { Application } from \"./Application\";\r\nimport * as bodyParser from \"body-parser\";\r\nimport { transport_obj, dsn_cis, path2db_sqlite, base_path, port, addition_path } from \"./settings\";\r\n//\r\nimport { multer } from \"multer\";\r\nimport { authenticate_answer, send_email_answer } from \"./interfaces/interface\";\r\nimport { sendEmail, authenticate } from \"./modules/lib/functions\";\r\nimport { resolve } from \"path/posix\";\r\n//\r\nimport { fs } from \"file-system\";\r\nconst multer = require(\"multer\");\r\nconst path = require(\"path\");\r\nconst app = express();\r\nconst upload = multer({ storage: multer.memoryStorage() });\r\nconst application = new Application(path2db_sqlite, dsn_cis);\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\r\n    session({\r\n        resave: false, // don't save session if unmodified\r\n        saveUninitialized: true, // don't create session until something stored\r\n        secret: \"strange mood\",\r\n    })\r\n);\r\n\r\nrouter.use((req, res, next) => {\r\n    delete req.session.error;\r\n    delete req.session.success;\r\n    next();\r\n});\r\n\r\nrouter.use(\r\n    addition_path + \"/login\",\r\n    bodyParser.urlencoded({\r\n        extended: true,\r\n        type: \"application/x-www-form-urlencoded\",\r\n    })\r\n);\r\nrouter.use((req, res, next) => {\r\n    res.locals.user = req.session.user;\r\n    next();\r\n});\r\nrouter.post(addition_path + \"/login\", (req, res) => {\r\n    authenticate(req.body.username, req.body.password, application).then((answ: authenticate_answer) => {\r\n        console.log(\"Here\");\r\n        if (answ.result) {\r\n            req.session.regenerate(() => {\r\n                req.session.user = { id_user: answ.id_user };\r\n                if (req.url.indexOf(\"public\") == -1) {\r\n                    console.log(\"Here\");\r\n                    res.redirect(req.query.back || req.baseUrl + addition_path + \"/public/index.html\");\r\n                } else {\r\n                    res.redirect(req.query.back || req.baseUrl + req.url);\r\n                }\r\n            });\r\n        } else {\r\n            req.session.error = \"Authentication failed, please check your \" + \" username and password.\";\r\n            res.redirect(req.baseUrl + \"/login\");\r\n        }\r\n    });\r\n});\r\nrouter.get(addition_path + \"/login\", (req, res) => {\r\n    res.render(\"login\", {\r\n        error: req.session.error,\r\n        success: req.session.success,\r\n    });\r\n});\r\nrouter.get(addition_path + \"/public/comments.html\", (req, res, next) => {\r\n    const url = new URL(req.url, \"https://node-http.glitch.me/\");\r\n    if (url.searchParams.get(\"id_question\") != null && url.searchParams.get(\"id_user\") != null) {\r\n        req.session.comments = { id_user: url.searchParams.get(\"id_user\") };\r\n    }\r\n    next();\r\n});\r\nrouter.get(addition_path + \"/public/teach.html\", (req, res, next) => {\r\n    req.session.comments = undefined;\r\n    next();\r\n});\r\nrouter.get(addition_path + \"/public/index.html\", (req, res, next) => {\r\n    req.session.comments = undefined;\r\n    next();\r\n});\r\nrouter.get(addition_path + \"/api_cms\", (req, res) => {\r\n    console.log(\"HERE APICMS GET\");\r\n});\r\nrouter.post(\r\n    \"/api_cms\",\r\n    upload.array(\"uploaded_files\" /* name attribute of <file> element in your form */),\r\n    (request, response, next) => {\r\n        if (request.method == \"POST\") {\r\n            var body = \"\";\r\n            const files = request.files;\r\n            console.log(files);\r\n\r\n            if (!files) {\r\n                const error: any = new Error(\"Please choose files\");\r\n                error.httpStatusCode = 400;\r\n\r\n                return next(error);\r\n            }\r\n            files.forEach((element) => {\r\n                fs.writeFile(`./server/download/image.jpg`, element.buffer, () => console.log(\"finished downloading!\"));\r\n            });\r\n            response.send(JSON.stringify({ result: false }));\r\n            response.end();\r\n            // request.on(\"data\", function (data) {\r\n            //     body += data;\r\n            //     if (body.length > 1e6) request.connection.destroy();\r\n            // });\r\n            // request.on(\"end\", function () {\r\n            //     console.log(\"body\", body);\r\n            //     // resolve({ result: false });\r\n            //     // var post_data = JSON.parse(body);\r\n            //     // if (request.session.user) {\r\n            //     //     post_data.id_user = request.session.user.id_user;\r\n            //     // }\r\n            //     // application.loadModule(post_data).then((data) => {\r\n            //     // response.send(JSON.stringify(data));\r\n            //     response.send(JSON.stringify({ result: false }));\r\n\r\n            //     response.end();\r\n            //     // });\r\n            // });\r\n        }\r\n    }\r\n);\r\nrouter.post(\"/api\", (request, response) => {\r\n    console.log(\"request.files\", request);\r\n    if (request.method == \"POST\") {\r\n        var body = \"\";\r\n        request.on(\"data\", function (data) {\r\n            body += data;\r\n            if (body.length > 1e6) request.connection.destroy();\r\n        });\r\n        request.on(\"end\", function () {\r\n            var post_data = JSON.parse(body);\r\n            if (request.session.user) {\r\n                post_data.id_user = request.session.user.id_user;\r\n            }\r\n            application.loadModule(post_data).then((data) => {\r\n                response.send(JSON.stringify(data));\r\n\r\n                response.end();\r\n            });\r\n        });\r\n    }\r\n});\r\n\r\nrouter.post(\r\n    \"/send\",\r\n    upload.array(\"file_uploaded\" /* name attribute of <file> element in your form */),\r\n    (request, response) => {\r\n        if (request.method == \"POST\") {\r\n            let attachments = request.files.map((file) => {\r\n                return { filename: file.originalname, content: file.buffer };\r\n            });\r\n            const send_data = {\r\n                from: request.body.address2sender, // sender address\r\n                to: request.body.address2send, // list of receivers\r\n                subject: request.body.subject,\r\n                text: request.body.content,\r\n                attachments: attachments,\r\n            };\r\n\r\n            sendEmail(transport_obj, send_data).then((data: send_email_answer) => {\r\n                if (data.result) {\r\n                    const module_info = {\r\n                        module: \"Answer\",\r\n                        action: \"SetTimeAnswering\",\r\n                        time: new Date().getTime(),\r\n                        id_question: request.body.id_question,\r\n                    };\r\n                    application.loadModule(module_info).then((data: any) => {\r\n                        if (!data.result) {\r\n                            response.redirect(\r\n                                request.baseUrl + addition_path + \"/public/index.html?message=\" + data.message\r\n                            );\r\n                        } else {\r\n                            response.redirect(request.baseUrl + addition_path + \"/public/index.html\");\r\n                        }\r\n                        response.end();\r\n                    });\r\n                } else {\r\n                    response.redirect(\r\n                        request.baseUrl +\r\n                            addition_path +\r\n                            `/public/answer.html?id_question=${request.body.id_question}&message=${data.message}`\r\n                    );\r\n                    response.end();\r\n                }\r\n            });\r\n        }\r\n    }\r\n);\r\nfunction restrict(req, res, next) {\r\n    if (req.session.user || req.session.comments || req.url.indexOf(\"bootstrap\") != -1) {\r\n        next();\r\n    } else {\r\n        if (req.url != addition_path + \"/login\" && req.url != addition_path + \"/public/login.html\") {\r\n            var url = req.baseUrl + addition_path + \"/login\";\r\n            console.log(\"Here222\", url);\r\n            res.redirect(url);\r\n        } else {\r\n            res.render(\"login\", {\r\n                error: req.session.error,\r\n                success: req.session.success,\r\n            });\r\n        }\r\n    }\r\n}\r\nrouter.use(restrict);\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", __dirname + addition_path + \"/../public/views/\");\r\napp.locals.base_path = base_path;\r\napp.locals.addition_path = addition_path;\r\napp.use(\"/\", router);\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.static(path.join(__dirname, \"../\")));\r\n\r\nconst server = app.listen(port, (error) => {\r\n    if (error) return console.log(`Error: ${error}`);\r\n    console.log(`Server listening on port ${server.address().port}`);\r\n});\r\n"]}