{"version":3,"sources":["../../source/nodeserver/index.ts"],"names":[],"mappings":"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","file":"../index.js","sourcesContent":["import * as express from 'express';\r\nconst port = 8000;\r\nconst basePath = 'localhost:8000';\r\nconst dsn_cis = {\r\n    user: \"cis\",\r\n    host: \"localhost\",\r\n    database: \"db_cis\",\r\n    password: \"cis_passwd\",\r\n    port: 5432,\r\n}\r\nimport * as session from 'express-session';\r\nimport * as bodyParser from 'body-parser';\r\nimport { route } from \"./route/user\"\r\n\r\n// const bodyParser = require('body-parser');\r\nconst app = express();\r\nconst path = require('path');\r\nimport { Application } from \"./Application\";\r\n// const basicAuth = require('express-basic-auth')\r\n// import { load_static_file, getUrlInfo } from \"./modules/lib/functions\";\r\nconst path2db = \"./database.db3\";\r\nconst application = new Application(path2db);\r\n\r\nconst router = express.Router();\r\n\r\nfunction authenticate(username, password) {\r\n    console.log(\"username, password\", username, password);\r\n    if (username === 'admin' && password === '123') {\r\n        return { login: 'admin' };\r\n    }\r\n}\r\nrouter.use(session({\r\n    resave: false, // don't save session if unmodified\r\n    saveUninitialized: true, // don't create session until something stored\r\n    secret: 'strange mood'\r\n}));\r\n\r\nrouter.use((req, res, next) => {\r\n    delete req.session.error;\r\n    delete req.session.success;\r\n    next();\r\n});\r\n\r\n\r\nrouter.use('/login', bodyParser.urlencoded({\r\n    extended: true,\r\n    type: 'application/x-www-form-urlencoded'\r\n}));\r\nrouter.use((req, res, next) => {\r\n    // console.log(\"TEST111\", req.session);\r\n    res.locals.user = req.session.user;\r\n    next();\r\n});\r\nrouter.post('/login', (req, res) => {\r\n\r\n    let user = authenticate(req.body.username, req.body.password);\r\n\r\n    if (user) {\r\n        // Regenerate session when signing in\r\n        // to prevent fixation          \r\n        req.session.regenerate(() => {\r\n            req.session.user = user;\r\n            res.redirect(req.query.back || (req.baseUrl + '/public/index.html'));\r\n        });\r\n    } else {\r\n        req.session.error = 'Authentication failed, please check your '\r\n            + ' username and password.';\r\n\r\n        res.redirect(req.baseUrl + '/login');\r\n    }\r\n});\r\nrouter.get('/login', (req, res) => {\r\n    res.render('login', {\r\n        error: req.session.error,\r\n        success: req.session.success\r\n    });\r\n});\r\n\r\nrouter.post('/api', (request, response) => {\r\n\r\n    if (request.method == 'POST') {\r\n        console.log(\"q.restrict.user\", request.session.user);\r\n        var body = '';\r\n        request.on('data', function (data) {\r\n            body += data;\r\n            if (body.length > 1e6)\r\n                request.connection.destroy();\r\n        });\r\n        request.on('end', function () {\r\n            var post_data = JSON.parse(body);\r\n            application.loadModule(post_data).then((data) => {\r\n                response.send(JSON.stringify(data));\r\n                response.end();\r\n            });\r\n        });\r\n    }\r\n});\r\nfunction restrict(req, res, next) {\r\n\r\n    if (req.session.user /*|| req.hostname == 'localhost'*/) {\r\n        next();\r\n    } else {\r\n        if (req.url != \"/login\" && req.url != \"/public/login.html\") {\r\n            var url = req.baseUrl + '/public/login.html?back=' + encodeURIComponent(req.originalUrl);\r\n            var url = req.baseUrl + '/login'\r\n            res.redirect(url);\r\n        } else {\r\n\r\n            // return res.redirect('/login');\r\n            res.render('login', {\r\n                error: req.session.error,\r\n                success: req.session.success\r\n            });\r\n\r\n        }\r\n    }\r\n}\r\n\r\nrouter.use(restrict);\r\napp.set('view engine', 'ejs');\r\napp.set('views', __dirname + '/../public/views/');\r\napp.locals.basePath = basePath;\r\n// // app.engine('html', engines.hogan);\r\n// app.set('view engine', 'html');\r\napp.use(\"/\", router);\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }))\r\napp.use(express.static(path.join(__dirname, \"../\")));\r\n\r\n\r\nconst server = app.listen(port, (error) => {\r\n    if (error) return console.log(`Error: ${error}`);\r\n    console.log(`Server listening on port ${server.address().port}`);\r\n});\r\n"]}