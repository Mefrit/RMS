{"version":3,"sources":["../../source/nodeserver/index.ts"],"names":[],"mappings":";AACA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC5B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACxB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;AAE1B,MAAM,SAAS,GAAG;IACd,OAAO,EAAE,WAAW;IACpB,KAAK,EAAE,iBAAiB;IACxB,MAAM,EAAE,UAAU;IAClB,MAAM,EAAE,cAAc;IACtB,MAAM,EAAE,WAAW;IACnB,MAAM,EAAE,YAAY;IACpB,MAAM,EAAE,WAAW;IACnB,MAAM,EAAE,eAAe;IACvB,OAAO,EAAE,kBAAkB;IAC3B,OAAO,EAAE,WAAW;IACpB,QAAQ,EAAE,YAAY;IACtB,MAAM,EAAE,kBAAkB;CAC7B,CAAA;AACD,SAAS,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG;IAC5C,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,2BAA2B,CAAC,CAAC;IAGhE,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;IACtC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,KAAK,EAAE,IAAI;QACvC,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAAC;QACpE,IAAI,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QAClC,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,KAAK,EAAE;YAEP,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAA;YACzB,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;SAEtC;aAAM;YACH,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA;YAClD,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;SACrB;IACL,CAAC,CAAC,CAAA;AACN,CAAC;AACD,IAAI,CAAC,YAAY,CAAC,UAAU,OAAO,EAAE,QAAQ;IACzC,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACjC,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,EAAE;QACrB,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAMhE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;KAC5D;SAAM;QACH,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;KAE5C;AAIL,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC","file":"../index.js","sourcesContent":["\r\nconst http = require('http')\r\nconst fs = require('fs') // Для взаимодействия с файловой системой\r\nconst path = require('path') // Для работы с путями файлов и каталогов\r\nconst url = require('url')\r\n\r\nconst mimeTypes = {\r\n    '.html': 'text/html',\r\n    '.js': 'text/javascript',\r\n    '.css': 'text/css',\r\n    '.ico': 'image/x-icon',\r\n    '.png': 'image/png',\r\n    '.jpg': 'image/jpeg',\r\n    '.gif': 'image/gif',\r\n    '.svg': 'image/svg+xml',\r\n    '.json': 'application/json',\r\n    '.woff': 'font/woff',\r\n    '.woff2': 'font/woff2',\r\n    '.map': \"application/json\"\r\n}\r\nfunction load_static_file(request, response, uri) {\r\n    response.setHeader(\"Content-Type\", \"text/html; charset=utf-8;\");\r\n\r\n    // получаем путь после слеша\r\n    const filePath = request.url.substr(1)\r\n    fs.readFile(filePath, function (error, data) {\r\n        const parsedUrl = new URL(filePath, 'https://node-http.glitch.me/');\r\n        let pathName = parsedUrl.pathname;\r\n        let ext = path.extname(pathName);\r\n        if (error) {\r\n\r\n            response.statusCode = 404\r\n            response.end('Resourse not found!')\r\n\r\n        } else {\r\n            response.setHeader('Content-Type', mimeTypes[ext])\r\n            response.end(data)\r\n        }\r\n    })\r\n}\r\nhttp.createServer(function (request, response) {\r\n    var uri = url.parse(request.url);\r\n    if (uri.pathname == \"/\") {\r\n        response.writeHead(200, { 'Content-Type': 'application/json' });\r\n        // response.setHeader(200, { \"Content-Type\": \"text/plain\" });\r\n        // response.end(JSON.stringify({ result: \"ok\" }));\r\n        // response.write(JSON.stringify({ result: \"ok111111111\" }));\r\n        // response.end();\r\n        // response.close\r\n        response.json(JSON.stringify({ result: \"ok111111111\" }));\r\n    } else {\r\n        load_static_file(request, response, uri);\r\n\r\n    }\r\n\r\n\r\n\r\n}).listen(3000);\r\n\r\n//# sourceMappingURL=maps/index.js.map"]}