{"version":3,"sources":["../../source/nodeserver/index.ts"],"names":[],"mappings":";;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,MAAM,IAAI,GAAG,IAAI,CAAC;AAClB,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,+CAA4C;AAC5C,uDAAuE;AAGvE,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,MAAM,OAAO,GAAG,gBAAgB,CAAC;AACjC,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,CAAC;AAE7C,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC;IAC1B,QAAQ,EAAE,IAAI;CACjB,CAAC,CAAC,CAAC;AAEJ,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAA;AAC7B,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AACrD,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE;IAC/B,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;IACpC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAChE,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAC5B,SAAS,GAAG,EAAE,CAAC;IACnB,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;QACxB,SAAS,IAAI,IAAI,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACnB,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAClC,MAAM,WAAW,GAAG,IAAA,sBAAU,EAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAG1C,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACzD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACpC,QAAQ,CAAC,GAAG,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AAKP,CAAC,CAAC,CAAC;AACH,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE,GAAG;IAC5B,GAAG,CAAC,IAAI,CAAC,kBAAkB,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC;AAEH,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,EAAE;IACtC,IAAI,KAAK;QAAE,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC;IACjD,OAAO,CAAC,GAAG,CAAC,4BAA4B,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAErE,CAAC,CAAC,CAAC","file":"../index.js","sourcesContent":["\r\nconst express = require('express');\r\nconst port = 8000;\r\nconst bodyParser = require('body-parser');\r\nconst app = express();\r\nconst path = require('path');\r\nimport { Application } from \"./Application\";\r\nimport { load_static_file, getUrlInfo } from \"./modules/lib/functions\";\r\n\r\n\r\nconst url = require(\"url\");\r\nconst path2db = \"./database.db3\";\r\nconst application = new Application(path2db);\r\n// Use Node.js body parsing middleware\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n    extended: true,\r\n}));\r\n// console.log(__dirname, request.url);\r\napp.use(express.urlencoded())\r\napp.use(express.static(path.join(__dirname, \"../\")));\r\napp.get('/', (request, response) => {\r\n    console.log(\"HEREEE\", request.body);\r\n    response.writeHead(200, { \"Content-Type\": \"application/json\" });\r\n    var uri = url.parse(request.url),\r\n        post_data = \"\";\r\n    request.on(\"data\", (data) => {\r\n        post_data += data;\r\n    });\r\n\r\n    request.on(\"end\", () => {\r\n        post_data = JSON.parse(post_data);\r\n        const module_info = getUrlInfo(uri.query);\r\n\r\n        // console.log(\"module_info \\n\\n\", module_info);\r\n        application.loadModule(module_info, post_data).then((data) => {\r\n            response.send(JSON.stringify(data));\r\n            response.end();\r\n        });\r\n    });\r\n    // response.send({\r\n    //     message: 'Node.js and Express REST API'\r\n    // }\r\n\r\n});\r\napp.get('/p', function (req, res) {\r\n    res.send(\"tagId is set to \" + req.query);\r\n});\r\n// Start the server\r\nconst server = app.listen(port, (error) => {\r\n    if (error) return console.log(`Error: ${error}`);\r\n    console.log(`Server listening on port ${server.address().port}`);\r\n\r\n});\r\n// const http = require(\"http\");\r\n\r\n// const url = require(\"url\");\r\n\r\n// import { Application } from \"./Application\";\r\n// import { load_static_file, getUrlInfo } from \"./modules/lib/functions\";\r\n\r\n// const path2db = \"./database.db3\";\r\n// const application = new Application(path2db);\r\n\r\n// http.createServer(function (request, response) {\r\n//     var uri = url.parse(request.url),\r\n//         post_data = \"\";\r\n\r\n//     if (uri.pathname == \"/\") {\r\n//         // FIX ME как то покруче сделать\r\n//         response.writeHead(200, { \"Content-Type\": \"application/json\" });\r\n\r\n//         request.on(\"data\", (data) => {\r\n//             post_data += data;\r\n//         });\r\n\r\n//         request.on(\"end\", () => {\r\n//             post_data = JSON.parse(post_data);\r\n//             const module_info = getUrlInfo(uri.query);\r\n\r\n//             // console.log(\"module_info \\n\\n\", module_info);\r\n//             application.loadModule(module_info, post_data).then((data) => {\r\n//                 response.write(JSON.stringify(data));\r\n//                 response.end();\r\n//             });\r\n//         });\r\n//     } else {\r\n//         load_static_file(response, uri);\r\n//     }\r\n// }).listen(8000);\r\n// console.log(\"run server on 8000 port111\");\r\n//# sourceMappingURL=maps/index.js.map"]}