{"version":3,"sources":["../../source/nodeserver/modules/ModuleTeacher.ts"],"names":[],"mappings":";;;AAAA,uDAAqD;AACrD,gDAA6C;AAC7C,MAAa,cAAe,SAAQ,8BAAc;IAAlD;;QACI,sBAAiB,GAAG,CAAC,SAAc,EAAE,EAAE;YACnC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;gBACzC,IAAI,SAAS,CAAC,aAAa,IAAI,KAAK,EAAE;oBAUlC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;wBACpE,IAAI,MAAM,CAAC,MAAM,EAAE;4BACf,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;yBACtD;wBACD,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,6CAA6C,EAAE,CAAC,CAAC;oBACvF,CAAC,CAAC,CAAA;iBAEL;qBAAM;oBACH,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,oDAAoD,EAAE,CAAC,CAAC;iBAC7F;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IAqDN,CAAC;IApDG,YAAY,CAAC,QAAQ,EAAE,GAAG;QACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;gBAEpB,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,IAAI;oBAEjC,IAAI,GAAG,EAAE;wBACL,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;qBAC9B;oBACD,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IACD,WAAW,CAAC,SAAc;QACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,MAAM,UAAU,GAAG,IAAI,aAAK,CAAC,EAAE,CAAC,CAAC;YACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACrC,MAAM,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;YAW9C,MAAM,KAAK,GAAG;qGAC2E,aAAa,IAAI,CAAC;YAC3G,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;gBAUpD,IAAI,MAAM,CAAC,MAAM,EAAE;oBACf,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;oBACpC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;iBACnG;gBACD,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC;YACvE,CAAC,CAAC,CAAA;YAGF,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAhFD,wCAgFC","file":"../../modules/ModuleTeacher.js","sourcesContent":["import { Module_Default } from \"./lib/ModuleDefault\";\r\nimport { Bayes } from \"../modules/lib/bayes\";\r\nexport class Module_Teacher extends Module_Default {\r\n    actionGetDocsList = (post_data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(\"getDocsList\");\r\n            const database = this.db_obj.getDB();\r\n            console.log(\"post_data ==> \", post_data);\r\n            if (post_data.type_resource == \"cms\") {\r\n                // database.serialize(() => {\r\n                //     // FIX ME переделать, клогда будем добавлять ссылки из cis\r\n                //     // database.all(`SELECT * FROM links`, function (err, rows) {\r\n                //     //     if (err) {\r\n                //     //         resolve({ result: false, message: \"Не удалось загрузить ссылки на документацию\" });\r\n                //     //     }\r\n                //     //     resolve({ result: true, docs_links: rows });\r\n                //     // });\r\n\r\n                this.getDocsLinks(database, `SELECT * FROM links`).then((answer: any) => {\r\n                    if (answer.result) {\r\n                        resolve({ result: true, docs_links: answer.rows });\r\n                    }\r\n                    resolve({ result: false, message: \"Не удалось загрузить ссылки на документацию\" });\r\n                })\r\n\r\n            } else {\r\n                resolve({ result: false, message: \"Не удалось загрузить ссылки на документацию в CIS.\" });\r\n            }\r\n        });\r\n    };\r\n    getDocsLinks(database, sql) {\r\n        return new Promise((resolve, reject) => {\r\n            database.serialize(() => {\r\n                // FIX ME переделать, клогда будем добавлять ссылки из cis\r\n                database.all(sql, function (err, rows) {\r\n\r\n                    if (err) {\r\n                        resolve({ result: false });\r\n                    }\r\n                    resolve({ result: true, rows: rows });\r\n                });\r\n            });\r\n        })\r\n    }\r\n    actionTrain(post_data: any) {\r\n        return new Promise((resolve, reject) => {\r\n            const train_byes = new Bayes(\"\");\r\n            const database = this.db_obj.getDB();\r\n            const type_resource = post_data.type_resource;\r\n            // database.serialize(() => {\r\n            //     // FIX ME переделать, клогда будем добавлять ссылки из cis\r\n            //     database.all(`SELECT * FROM links WHERE type_resource = ${type_resource}`, function (err, rows) {\r\n            //         if (err) {\r\n            //             resolve({ result: false, message: \"Не удалось обучить алгоритм\" });\r\n            //         }\r\n            //         console.log(train_byes.trainByLetter(post_data.letter, rows));\r\n            //         resolve({ result: false, message: \"Не удалось обучить алгоритм.\" });\r\n            //     });\r\n            // });  \r\n            const query = `SELECT l.* FROM links as l JOIN platforms_links_access as pla ON l.id_link = \r\n            pla.id_link JOIN platforms as pl ON pl.id_platform =  pla.id_platform WHERE  pl.title=\"${type_resource}\" `;\r\n            this.getDocsLinks(database, query).then((answer: any) => {\r\n                // console.log(\"answer\", answer);\r\n                // answer.rows.forEach(element => {\r\n                //     database.run('INSERT INTO platforms_links_access(id_link, id_platform) VALUES(?, ?)', [element.id_link, 1], (err) => {\r\n                //         if (err) {\r\n                //             return console.log(err.message);\r\n                //         }\r\n                //         console.log('Row was added to the table: ${this.lastID}');\r\n                //     })\r\n                // });\r\n                if (answer.result) {\r\n                    console.log(\"post_data\", post_data);\r\n                    console.log(train_byes.trainByLetter(post_data.letter, answer.rows, post_data.user_docs_links));\r\n                }\r\n                resolve({ result: false, message: \"Не удалось обучить алгоритм\" });\r\n            })\r\n\r\n\r\n            resolve({ result: false, message: \"Не удалось обучить алгоритм.\" });\r\n        });\r\n    }\r\n}\r\n"]}