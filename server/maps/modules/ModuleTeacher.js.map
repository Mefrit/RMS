{"version":3,"sources":["../../source/nodeserver/modules/ModuleTeacher.ts"],"names":[],"mappings":"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","file":"../../modules/ModuleTeacher.js","sourcesContent":["import { Module_Default } from \"./lib/ModuleDefault\";\r\nimport { Bayes } from \"../modules/lib/bayes\";\r\nimport { teacher_get_docs_list_post } from \"../interfaces/interface\";\r\nexport class Module_Teacher extends Module_Default {\r\n    actionGetDocsList = (post_data: teacher_get_docs_list_post) => {\r\n        return new Promise((resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            if (post_data.type_resource == \"cms\") {\r\n                this.getDocsLinks(database, `SELECT * FROM links`).then((answer: any) => {\r\n                    if (answer.result) {\r\n                        resolve({ result: true, docs_links: answer.rows });\r\n                    }\r\n                    resolve({ result: false, message: \"Не удалось загрузить ссылки на документацию\" });\r\n                });\r\n            } else {\r\n                resolve({ result: false, message: \"Не удалось загрузить ссылки на документацию в CIS.\" });\r\n            }\r\n        });\r\n    };\r\n    getDocsLinks(database, sql) {\r\n        return new Promise((resolve, reject) => {\r\n            database.serialize(() => {\r\n                database.all(sql, function (err, rows) {\r\n                    if (err) {\r\n                        resolve({ result: false });\r\n                    }\r\n                    resolve({ result: true, rows: rows });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    checkLinks(cache_links, url) {\r\n        let result = false;\r\n        cache_links.forEach((element) => {\r\n            if (element.url == url) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    addNewLink(database, link_obj, id_platform) {\r\n        return new Promise((resolve, reject) => {\r\n            database.serialize(() => {\r\n                database.run(\r\n                    \"INSERT INTO links(url, title,description) VALUES(?, ?, ?)\",\r\n                    [link_obj.link, link_obj.title, link_obj.description],\r\n                    (err, rows) => {\r\n                        if (err) {\r\n                            return resolve({ result: false, message: err.message });\r\n                        }\r\n                        database.all(\"SELECT MAX(id_link )as id from links\", function (err, last_id) {\r\n                            if (err) {\r\n                                resolve({\r\n                                    result: false,\r\n                                    message: \"Ошибка при добавлении новой ссылки.\" + err.message,\r\n                                });\r\n                            }\r\n\r\n                            database.run(\r\n                                \"INSERT INTO platforms_links_access(id_link,id_platform) VALUES(?, ?)\",\r\n                                [last_id[0].id, id_platform],\r\n                                (err) => {\r\n                                    if (err) {\r\n                                        return resolve({\r\n                                            result: false,\r\n                                            message: \"Ошибка при добавлении новой ссылки.\" + err.message,\r\n                                        });\r\n                                    }\r\n\r\n                                    return resolve({ result: true });\r\n                                }\r\n                            );\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    }\r\n    actionEditListLinks(post_data: any) {\r\n        return new Promise((resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            const query = `SELECT l.* FROM links as l JOIN platforms_links_access as pla ON l.id_link = \r\n            pla.id_link JOIN platforms as pl ON pl.id_platform = pla.id_platform WHERE  pl.title=\"${post_data.link_obj.type_resource}\" `;\r\n\r\n            this.getDocsLinks(database, query).then((answer: any) => {\r\n                if (answer.result) {\r\n                    if (!this.checkLinks(answer.rows, post_data.link_obj.link)) {\r\n                        resolve(\r\n                            this.addNewLink(\r\n                                database,\r\n                                post_data.link_obj,\r\n                                post_data.link_obj.type_resource == \"cms\" ? 1 : 2\r\n                            )\r\n                        );\r\n                    } else {\r\n                        resolve({ result: false, message: \"Ссылка уже существует в списке\" });\r\n                    }\r\n                }\r\n                resolve({ result: false, message: \"Не удалось изменить список ссылок\" });\r\n            });\r\n\r\n            //\r\n        });\r\n    }\r\n    actionGetRecomendation(post_data: any) {\r\n        return new Promise((resolve, reject) => {\r\n            const train_byes = new Bayes(\"\");\r\n            const database = this.db.getDBSqlite();\r\n            const type_resource = post_data.type_resource;\r\n            const query = `SELECT l.* FROM links as l JOIN platforms_links_access as pla ON l.id_link = \r\n            pla.id_link JOIN platforms as pl ON pl.id_platform = pla.id_platform WHERE  pl.title=\"${type_resource}\" `;\r\n\r\n            this.getDocsLinks(database, query).then((answer: any) => {\r\n                if (answer.result) {\r\n                    resolve({ result: true, links: train_byes.getRecomendation(post_data.letter, answer.rows) });\r\n                }\r\n                resolve({ result: false, message: \"Не удалось получить рекомендации.\" });\r\n            });\r\n        });\r\n    }\r\n    actionTrain(post_data: any) {\r\n        return new Promise((resolve, reject) => {\r\n            const train_byes = new Bayes(\"\");\r\n            const database = this.db.getDBSqlite();\r\n            const type_resource = post_data.type_resource;\r\n            const query = `SELECT l.* FROM links as l JOIN platforms_links_access as pla ON l.id_link = \r\n            pla.id_link JOIN platforms as pl ON pl.id_platform =  pla.id_platform WHERE  pl.title=\"${type_resource}\" `;\r\n            this.getDocsLinks(database, query).then((answer: any) => {\r\n                if (answer.result) {\r\n                    train_byes.trainByLetter(post_data.letter, answer.rows, post_data.user_docs_links);\r\n                }\r\n                resolve({ result: true, message: \"Алгоритм успешно переобучен.\" });\r\n            });\r\n            resolve({ result: false, message: \"Не удалось обучить алгоритм.\" });\r\n        });\r\n    }\r\n}\r\n"]}