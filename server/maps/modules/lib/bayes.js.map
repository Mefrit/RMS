{"version":3,"sources":["../../source/nodeserver/modules/lib/bayes.ts"],"names":[],"mappings":";;;AAAA,uCAAgC;AAChC,MAAa,KAAK;IAEd,YAAY,KAAK;QACb,IAAI,CAAC,cAAc,GAAG;YAClB,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,IAAI;YACJ,GAAG;YACH,GAAG;YACH,IAAI;YACJ,GAAG;YACH,GAAG;YACH,OAAO;YACP,GAAG;YACH,GAAG;YACH,GAAG;YACH,MAAM;SACT,CAAC;IACN,CAAC;IACD,kBAAkB,CAAC,MAAM;QACrB,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QACvD,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACrC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,OAAO,IAAI,EAAE,EAAE;gBAC7D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAItC,CAAC;IACD,aAAa,CAAC,MAAc,EAAE,KAAY;QACtC,IAAI,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAUlD,MAAM,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACrC,WAAW,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzB,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACzB,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IAqDP,CAAC;CACJ;AAjHD,sBAiHC","file":"../../../modules/lib/bayes.js","sourcesContent":["import Stemmer from \"./stemmer\";\r\nexport class Bayes {\r\n    cache_elements: string[];\r\n    constructor(path2) {\r\n        this.cache_elements = [\r\n            \"-\",\r\n            '\"',\r\n            \"'\",\r\n            \"!\",\r\n            \"?\",\r\n            \".\",\r\n            \"(\",\r\n            \")\",\r\n            \"/\",\r\n            \"\\\\\",\r\n            \"<\",\r\n            \">\",\r\n            \"  \",\r\n            \",\",\r\n            \";\",\r\n            \"&quot\",\r\n            \"—\",\r\n            \"«\",\r\n            \"»\",\r\n            \"/s+/\",\r\n        ];\r\n    }\r\n    getWordsFromLetter(letter) {\r\n        letter = letter.toLowerCase();\r\n        letter = letter.replace(/<\\/?[a-zA-Z]+>/gi, \"\").trim();\r\n        letter = letter.replace(/\\s+/g, \" \");\r\n        let result = [];\r\n        console.log(letter);\r\n        letter.split(\"\").forEach((element) => {\r\n            if (this.cache_elements.indexOf(element) == -1 && element != \"\") {\r\n                result.push(element);\r\n            }\r\n        });\r\n\r\n        return result.join(\"\").split(\" \");\r\n        // if (this.cache_elements.indexOf(letter[i]) != -1) {\r\n        //     letter[i] = \"\";\r\n        // }\r\n    }\r\n    trainByLetter(letter: string, links: any[]) {\r\n        let cache_words = this.getWordsFromLetter(letter);\r\n\r\n        // letter = letter.replace(\r\n        //     // Match all keys\r\n        //     new RegExp(Object.keys(this.cache_elements).join(\"|\"), \"g\"),\r\n        //     // Just get value  from replacements\r\n        //     function (i) {\r\n        //         return this.cache_elements[i];\r\n        //     }\r\n        // );\r\n        const stemfer = new Stemmer();\r\n        console.log(\"after!!!\", cache_words);\r\n        cache_words = [\"добрый\"];\r\n        cache_words.forEach((elem) => {\r\n            console.log(\"stemfer\", stemfer.russian(elem));\r\n        });\r\n        // $article = preg_replace('|[\\s]+|s', ' ', mb_strtolower($article));\r\n        // $article = explode(' ', $article);\r\n        // $article = array_filter(array_count_values($article), function($v){\r\n        //     return $v > 0;\r\n        // });\r\n        // $new_result = [];\r\n\r\n        // foreach($article as $word=>$count){\r\n\r\n        //     if(strlen($word) > 2 && !in_array($word, $prepositions)){\r\n\r\n        //         $word = $stemmer->russian($word);\r\n\r\n        //         if(!array_key_exists($word,$total_result)){\r\n        //             $tmp = new StdClass();\r\n        //             $tmp->count = 0;\r\n\r\n        //             $tmp->links = [];\r\n        //             $total_result[$word] = $tmp;\r\n        //         }\r\n        //         foreach($elem->links as $link_from_letter){\r\n        //             $find_link = false;\r\n        //             $new_links = [];\r\n        //             foreach(  $total_result[$word]->links as $elem_link_result){\r\n        //                 $elem_link_result = (array)$elem_link_result;\r\n        //                 if($elem_link_result['link'] == $link_from_letter){\r\n        //                     $elem_link_result['count_documents'] += 1;\r\n        //                     $elem_link_result['count'] += $count;\r\n        //                     $find_link = true;\r\n        //                     $total_result[$word]->count += $count;\r\n        //                 }\r\n        //                 $new_links []= $elem_link_result;\r\n\r\n        //             }\r\n        //             if(!$find_link){\r\n        //                 if(!array_key_exists($link_from_letter, $total_links_inf)){\r\n        //                     $total_links_inf[$link_from_letter] = [];\r\n        //                 }\r\n        //                 if(!is_array($total_links_inf[$link_from_letter ])){\r\n        //                     $total_links_inf[$link_from_letter] = [];\r\n        //                 }\r\n        //                 $tmp = new StdClass();\r\n        //                 $tmp->count = 1;\r\n        //                 $tmp->count_documents = 1;\r\n        //                 $tmp->link = $link_from_letter;\r\n        //                 $new_links []=  $tmp;\r\n        //                 $total_result[$word]->count += 1;\r\n        //             }\r\n        //         }\r\n        //         $total_result[$word]->links = $new_links ;\r\n        //     }\r\n        // }\r\n    }\r\n}\r\n"]}