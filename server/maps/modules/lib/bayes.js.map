{"version":3,"sources":["../../source/nodeserver/modules/lib/bayes.ts"],"names":[],"mappings":"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","file":"../../../modules/lib/bayes.js","sourcesContent":["import { stem } from \"./stemmer\";\r\nimport { fs } from \"file-system\";\r\n// const test = require('../../../../server/data/total_result.json');\r\nexport class Bayes {\r\n    cache_elements: string[];\r\n    links_docs: any[];\r\n    constructor(path2) {\r\n\r\n    }\r\n    getWordsFromLetter(letter, cache_elements) {\r\n        letter = letter.toLowerCase();\r\n        letter = letter.replace(/<\\/?[a-zA-Z]+>/gi, \"\").trim();\r\n        letter = letter.replace(/\\s+/g, \" \");\r\n        let result = [];\r\n        console.log(\"letter ==> \", letter);\r\n        letter.split(\"\").forEach((element) => {\r\n            if (cache_elements.indexOf(element) == -1 && element != \"\") {\r\n                result.push(element);\r\n            }\r\n        });\r\n        console.log(\"result\", result);\r\n        return result.join(\"\").split(\" \");\r\n        // if (this.cache_elements.indexOf(letter[i]) != -1) {\r\n        //     letter[i] = \"\";\r\n        // }\r\n    }\r\n    countElements(arr) {\r\n        var a = [], b = [], prev;\r\n\r\n        arr.sort();\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] !== prev) {\r\n                a.push(arr[i]);\r\n                b.push(1);\r\n            } else {\r\n                b[b.length - 1]++;\r\n            }\r\n            prev = arr[i];\r\n        }\r\n\r\n        return [a, b];\r\n    }\r\n    loadTrainData() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n        });\r\n    }\r\n    getStemElement(cache_words) {\r\n        return cache_words.map((elem) => {\r\n            return stem(elem);\r\n            // console.log(\"stemfer\", stemfer.russian(elem));\r\n        });\r\n    }\r\n    trainByLetter(letter: string, links_docs: any[]) {\r\n        const cache_elements = [\r\n            \"-\",\r\n            '\"',\r\n            \"'\",\r\n            \"!\",\r\n            \"№\",\r\n            \"?\",\r\n            \".\",\r\n            \"(\",\r\n            \")\",\r\n            \"/\",\r\n            \"\\\\\",\r\n            \"<\",\r\n            \">\",\r\n\r\n            \",\",\r\n            \";\",\r\n            \"&quot\",\r\n            \"—\",\r\n            \"«\",\r\n            \"»\",\r\n            \"/s+/\",\r\n        ];\r\n        let cache_words = this.getWordsFromLetter(letter, cache_elements);\r\n\r\n        const prepositions = [\"по\", \"из\", \"на\", \"в\", \"а\", \"при\", \"также\", \"но\", \"вы\", \"об\", \"как\", \"не\", \"или\", \"пожалуйста\", \"да\", \"для\", \"того\", \"чтобы\", \"это\", \"же\", \"так\", \"ваш\"];\r\n        // letter = letter.replace(\r\n        //     // Match all keys\r\n        //     new RegExp(Object.keys(this.cache_elements).join(\"|\"), \"g\"),\r\n        //     // Just get value  from replacements\r\n        //     function (i) {\r\n        //         return this.cache_elements[i];\r\n        //     }\r\n        // );\r\n        // const stemfer = new Stemmer();\r\n        // console.log(cache_words);\r\n        // cache_words = [\"аленушка\"];\r\n        cache_words = this.getStemElement(cache_words);\r\n        //получить ссылки\r\n        // let count_words;\r\n        // [cache_words, count_words] = this.countElements(cache_words);\r\n        // console.log(\"cache_words, count_words\", cache_words, count_words);\r\n        console.log(\":start REad File\", cache_words);\r\n        fs.readFile(\"./server/data/total_result.json\", \"utf8\", (err, jsonString) => {\r\n            if (err) {\r\n                return { result: false, message: \"Не удалось загрузить файл с данными для обучения. \" + err };\r\n            }\r\n            try {\r\n                const file = JSON.parse(jsonString);\r\n                console.log(\"Load File\", typeof prepositions);\r\n                // console.l\"og(\"Customer address is:\", links);\r\n                cache_words.forEach(elem => {\r\n\r\n                    if (prepositions.indexOf(elem) == -1) {\r\n                        // console.log(elem, file[elem], \"\\n\");\r\n                    } else {\r\n                        console.log(\"not Found\", elem, \"\\n\");\r\n                    }\r\n                });\r\n                // => \"Customer address is: Infinity Loop Drive\"\r\n            } catch (err) {\r\n                console.log(\"errr\", err);\r\n                return { result: false, message: \"Не удалось обработать файл с данными для обучения. \" + err };\r\n            }\r\n        });\r\n        // console.log(\"links_docs=> \", links_docs);\r\n        // cache_words.forEach(elem => {\r\n        //     if (prepositions.indexOf(elem) == -1) {\r\n        //         //\r\n        //     }\r\n        // });\r\n        // $article = preg_replace('|[\\s]+|s', ' ', mb_strtolower($article));\r\n        // $article = explode(' ', $article);\r\n        // $article = array_filter(array_count_values($article), function($v){\r\n        //     return $v > 0;\r\n        // });\r\n        // $new_result = [];\r\n\r\n        // foreach($article as $word=>$count){\r\n\r\n        //     if(strlen($word) > 2 && !in_array($word, $prepositions)){\r\n\r\n        //         $word = $stemmer->russian($word);\r\n\r\n        //         if(!array_key_exists($word,$total_result)){\r\n        //             $tmp = new StdClass();\r\n        //             $tmp->count = 0;\r\n\r\n        //             $tmp->links = [];\r\n        //             $total_result[$word] = $tmp;\r\n        //         }\r\n        //         foreach($elem->links as $link_from_letter){\r\n        //             $find_link = false;\r\n        //             $new_links = [];\r\n        //             foreach(  $total_result[$word]->links as $elem_link_result){\r\n        //                 $elem_link_result = (array)$elem_link_result;\r\n        //                 if($elem_link_result['link'] == $link_from_letter){\r\n        //                     $elem_link_result['count_documents'] += 1;\r\n        //                     $elem_link_result['count'] += $count;\r\n        //                     $find_link = true;\r\n        //                     $total_result[$word]->count += $count;\r\n        //                 }\r\n        //                 $new_links []= $elem_link_result;\r\n\r\n        //             }\r\n        //             if(!$find_link){\r\n        //                 if(!array_key_exists($link_from_letter, $total_links_inf)){\r\n        //                     $total_links_inf[$link_from_letter] = [];\r\n        //                 }\r\n        //                 if(!is_array($total_links_inf[$link_from_letter ])){\r\n        //                     $total_links_inf[$link_from_letter] = [];\r\n        //                 }\r\n        //                 $tmp = new StdClass();\r\n        //                 $tmp->count = 1;\r\n        //                 $tmp->count_documents = 1;\r\n        //                 $tmp->link = $link_from_letter;\r\n        //                 $new_links []=  $tmp;\r\n        //                 $total_result[$word]->count += 1;\r\n        //             }\r\n        //         }\r\n        //         $total_result[$word]->links = $new_links ;\r\n        //     }\r\n        // }\r\n    }\r\n}\r\n"]}