{"version":3,"sources":["../../source/nodeserver/modules/lib/bayes.ts"],"names":[],"mappings":"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","file":"../../../modules/lib/bayes.js","sourcesContent":["import { stem } from \"./stemmer\";\r\nimport { fs } from \"file-system\";\r\n// import * as total_links_inf from 'server/data/total_links_inf.json'\r\n// var json = require('./server/data/total_links_inf.json');\r\n\r\nexport class Bayes {\r\n    cache_elements: string[];\r\n    links_docs: any[];\r\n    prepositions: any;\r\n    symvols: any;\r\n    constructor(path2) {\r\n        this.prepositions = [\"по\", \"\", \"из\", \"на\", \"в\", \"а\", \"при\", \"также\", \"но\", \"вы\", \"об\", \"как\", \"не\", \"или\", \"пожалуйста\", \"да\", \"для\", \"того\", \"чтобы\", \"это\", \"же\", \"так\", \"ваш\"];\r\n        this.symvols = [\"-\", \"\\\"\", \"'\", \"!\", \"?\", \".\", \"(\", \")\", \"/\", \"\\\\\", \"<\", \">\", \",\", \"-\", '\"', \"'\", \"!\", \"№\", \"?\", \".\", \"(\", \")\", \"/\", \"\\\\\", \"<\", \">\", \",\", \";\", \"&quot\", \"—\", \"«\", \"»\", \"/s+/\",];\r\n    }\r\n    getWordsFromLetter(letter, cache_elements) {\r\n        letter = letter.toLowerCase();\r\n        letter = letter.replace(/<\\/?[a-zA-Z]+>/gi, \"\").trim();\r\n        letter = letter.replace(/\\s+/g, \" \");\r\n        let result = [];\r\n\r\n        letter.split(\"\").forEach((element) => {\r\n            if (cache_elements.indexOf(element) == -1 && element != \"\") {\r\n                result.push(element);\r\n            }\r\n        });\r\n\r\n        return result.join(\"\").split(\" \");\r\n\r\n    }\r\n    countElements(arr) {\r\n        var a = [], b = [], prev;\r\n\r\n        arr.sort();\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] !== prev) {\r\n                a.push(arr[i]);\r\n                b.push(1);\r\n            } else {\r\n                b[b.length - 1]++;\r\n            }\r\n            prev = arr[i];\r\n        }\r\n\r\n        return [a, b];\r\n    }\r\n    // loadTrainData() {\r\n    //     return new Promise((resolve, reject) => {\r\n\r\n    //     });\r\n    // }\r\n    getStemElements(arr) {\r\n        return arr.map((elem) => {\r\n            if (elem != '') {\r\n                return stem(elem);\r\n            }\r\n        });\r\n    }\r\n    getRecomendation(letter, links_docs) {\r\n        // replace JS\r\n        console.log(\"getRecomendation\");\r\n        let cache_words = this.getWordsFromLetter(letter, this.symvols),\r\n            cache_find_links = [],\r\n            inf_word,\r\n            cache_probability_links = [],\r\n            probability;\r\n        const total_links_inf = JSON.parse(fs.readFileSync('./server/data/total_links_inf.json'));\r\n        const total_result = JSON.parse(fs.readFileSync('./server/data/total_result.json'));\r\n        const about_links = JSON.parse(fs.readFileSync('./server/data/about_links.json'));\r\n        // cache_words = this.getStemElements(cache_words);\r\n\r\n\r\n        cache_words.forEach(word => {\r\n            console.log(word);\r\n            inf_word = total_result[stem(word)];\r\n            cache_find_links = [];\r\n            if (inf_word == undefined) {\r\n                inf_word = total_result[word];\r\n            }\r\n\r\n            if (inf_word != undefined) {\r\n\r\n                inf_word.links.forEach(elem_link => {\r\n                    probability = elem_link.count_documents / (Object.keys(total_links_inf).length - 1);\r\n                    // console.log(\"probability\", elem_link.link, elem_link.count_documents, probability, \"  Object.keys(total_links_inf).length\", Object.keys(total_links_inf).length)\r\n                    cache_find_links.push(elem_link.link)\r\n                    // console.log(\"word_inf ==:>>> \" + word, inf_word);\r\n                    if (!cache_probability_links[elem_link.link]) {\r\n                        cache_probability_links[elem_link.link] = probability;\r\n                    }\r\n                    cache_probability_links[elem_link.link] += Math.log((1 + elem_link.count) /\r\n                        (1 * (Object.keys(total_result).length) + total_links_inf[elem_link.link].length));\r\n\r\n                });\r\n                cache_probability_links = this.setLinkNotFoundWithCheck(total_links_inf, total_result, cache_probability_links, cache_find_links)\r\n            } else {\r\n\r\n                if (word != \"\" && this.prepositions.indexOf(word) == -1) {\r\n                    console.log(\"HEREE\")\r\n                    cache_probability_links = this.setLinkNotFound(total_links_inf, total_result, cache_probability_links);\r\n                }\r\n            }\r\n        });\r\n\r\n        let sortable = [];\r\n        // );\r\n        for (var key in cache_probability_links) {\r\n            sortable[key] = cache_probability_links[key];\r\n        }\r\n        // console.log(\" AFTER ALL Sortable \", sortable);\r\n        let sorted_keys = this.getSortedKeys(sortable);\r\n\r\n        let new_sortable = [];\r\n        let count = 0;\r\n        sorted_keys.forEach((elem, index, arr) => {\r\n            if (count < sorted_keys.length) {\r\n                new_sortable[elem] = sortable[elem];\r\n            }\r\n            count++;\r\n        });\r\n        // console.log(\" new_sortable \", new_sortable);\r\n        // return [];\r\n        // console.log(\"this.prepareDocsLinks(new_sortable, about_links)\", this.prepareDocsLinks(new_sortable, about_links));\r\n        return this.prepareDocsLinks(new_sortable, about_links)\r\n    }\r\n    getSortedKeys(obj) {\r\n        var keys = Object.keys(obj);\r\n        return keys.sort(function (a, b) { return obj[b] - obj[a] });\r\n    }\r\n    prepareDocsLinks(cache_chosen_links, about_links) {\r\n        let result = [];\r\n        // console.log(\"about_links\", about_links);\r\n        // console.log(\"cache_chosen_links\", cache_chosen_links);\r\n        for (let link in cache_chosen_links) {\r\n            about_links.forEach(link_obj => {\r\n                // console.log(\"link_obj =>  \", link_obj.title);\r\n\r\n                if (link_obj.link == link) {\r\n                    link_obj.url = link_obj.link;\r\n                    link_obj.mark = cache_chosen_links[link];\r\n                    delete link_obj.link;\r\n                    result.push(link_obj);\r\n                }\r\n\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    setLinkNotFound(total_links_inf, total_result, cache_probability_links) {\r\n        let probability, new_result = { ...cache_probability_links };\r\n        for (let key in total_links_inf) {\r\n\r\n            if (!new_result.hasOwnProperty(key)) {\r\n                probability = 1 / Object.keys(total_links_inf).length;\r\n                new_result[key] = probability;\r\n            }\r\n\r\n            new_result[key] += Math.log(1 / (1 * Object.keys(total_result).length + total_links_inf[key].length))\r\n\r\n            // console.log(\"key\", key);\r\n        }\r\n        // foreach($total_links_inf as $key => $elem_word){\r\n        //     if (!array_key_exists($key, $cache_probability)) {\r\n        //         $probability = 1 / count((array)$total_links_inf);\r\n        //         $cache_probability[$key] = $probability;\r\n        //     }\r\n        //     $cache_probability[$key] += log(1 / (1 * count((array)$total_result) + count($elem_word)));\r\n        // }\r\n        return new_result;\r\n    }\r\n    setLinkNotFoundWithCheck(total_links_inf, total_result, cache_probability_links, cache_find_links) {\r\n        let probability, new_result = { ...cache_probability_links };\r\n        // console.log(\"  Array.from(total_links_inf)\", total_links_inf);\r\n        // total_links_inf.forEach((elem_word: any, key, arr) => {\r\n        // console.log(\"cache_find_links => \", cache_find_links);\r\n        for (let key in total_links_inf) {\r\n            if (cache_find_links.indexOf(key) == -1) {\r\n                if (!new_result.hasOwnProperty(key)) {\r\n\r\n                    probability = 1 / Object.keys(total_links_inf).length;\r\n                    new_result[key] = probability;\r\n                }\r\n                cache_find_links.push(key);\r\n\r\n                new_result[key] += Math.log(1 / (1 * Object.keys(total_result).length + total_links_inf[key].length))\r\n            }\r\n        }\r\n        return new_result;\r\n    }\r\n    // private function setLinkNotFoundWithCheck($total_links_inf, $total_result, $cache_probability, $cache_finds_link, $probability){\r\n    //     foreach($total_links_inf as $key => $elem_word){\r\n    //         if(!in_array($key, $cache_finds_link)){\r\n    //             if(!array_key_exists($key, $cache_probability)){\r\n    //                 $probability = 1 / count((array)$total_links_inf);\r\n    //                 $cache_probability[$key] = $probability;\r\n    //             }\r\n    //             $cache_finds_link []= $key;\r\n    //             $cache_probability[$key] += log(1  / (1 *  count((array)$total_result) + count($elem_word)));\r\n    //         }\r\n    //     }\r\n    //     return $cache_probability;\r\n    // }\r\n    trainByLetter(letter: string, links_docs: any[], user_docs_links) {\r\n\r\n        let cache_words = this.getWordsFromLetter(letter, this.symvols), tmp, cache_counts_words;\r\n        let find_link = false,\r\n            new_links = [];\r\n\r\n        cache_words = this.getStemElements(cache_words);\r\n\r\n        [cache_words, cache_counts_words] = this.countElements(cache_words);\r\n        //получить ссылки\r\n        let new_total_result, new_total_links_inf;\r\n        const total_links_inf = fs.readFileSync('./server/data/total_links_inf.json');\r\n        const total_result = fs.readFileSync('./server/data/total_result.json');\r\n\r\n        if (!total_result || !total_links_inf) {\r\n            return { result: false, message: \"Не удалось загрузить файл с данными для обучения. \" };\r\n        }\r\n        try {\r\n            new_total_links_inf = { ...JSON.parse(total_links_inf) };\r\n            new_total_result = { ...JSON.parse(total_result) };\r\n            // console.log(\"Load File cache_words\", cache_words);\r\n\r\n            cache_words.forEach(word => {\r\n\r\n                if (this.prepositions.indexOf(word) == -1) {\r\n\r\n                    // new_file[elem].links.forEach(link_elem => {\r\n                    if (!new_total_result.hasOwnProperty(word)) {\r\n                        // console.log(\"HEREEE\", word, new_total_result[word])\r\n                        tmp = {};\r\n                        tmp.count = 0;\r\n                        tmp.links = [];\r\n                        new_total_result[word] = tmp;\r\n                    }\r\n                    new_links = [];\r\n                    new_links = new_total_result[word].links\r\n                    user_docs_links.forEach((user_link, index, arr) => {\r\n\r\n                        find_link = false;\r\n                        new_links = new_links.map(elem_link_result => {\r\n\r\n\r\n                            if (elem_link_result.link == user_link) {\r\n\r\n                                elem_link_result.count += cache_counts_words[index];\r\n                                elem_link_result.count_documents += 1;\r\n\r\n                                find_link = true;\r\n                                new_total_result[word].count += cache_counts_words[index];\r\n                                if (new_total_links_inf[user_link].indexOf(word) == -1) {\r\n                                    new_total_links_inf[user_link].push(word)\r\n                                }\r\n                            }\r\n                            return elem_link_result;\r\n\r\n\r\n\r\n                        });\r\n                        console.log(user_link + \" is added &\", find_link)\r\n                        // new_links.push(elem_link_result);\r\n                        if (!find_link) {\r\n                            find_link = false;\r\n                            if (!new_total_links_inf[user_link] || !Array.isArray(new_total_links_inf[user_link])) {\r\n                                new_total_links_inf[user_link] = [];\r\n                            }\r\n                            new_total_links_inf[user_link].push(word);\r\n                            tmp = {};\r\n                            tmp.count = 1;\r\n                            tmp.count_documents = 1;\r\n                            tmp.link = user_link;\r\n\r\n                            new_links.push(tmp);\r\n                            // console.log(new_links);\r\n                            // console.log(\"\\n\\n\");\r\n                            new_total_result[word].count += 1;\r\n                        }\r\n                    });\r\n                    new_total_result[word].links = new_links;\r\n                }\r\n            });\r\n            fs.writeFile('./server/data/total_result.json', JSON.stringify(new_total_result), function (error) {\r\n                if (error) {\r\n                    return { result: false, message: \"Не удалось записать файл с данными для обучения. (new_total_result.json)\" };\r\n                }// если возникла ошибка\r\n\r\n            });\r\n            fs.writeFile('./server/data/total_links_inf.json', JSON.stringify(new_total_links_inf), function (error) {\r\n                if (error) {\r\n                    return { result: false, message: \"Не удалось записать файл с данными для обучения. (total_links_inf.json)\" };\r\n                }// если возникла ошибка\r\n\r\n            });\r\n            return { result: true };\r\n\r\n        } catch (err) {\r\n            console.log(\"errr\", err);\r\n            return { result: false, message: \"Не удалось обработать файл с данными для обучения. \" + err };\r\n        }\r\n\r\n    }\r\n    trainByOldData() {\r\n        const total_key_words = fs.readFileSync('./server/data/keywords.json');\r\n        const total_result = fs.readFileSync('./server/data/total_result_started.json');\r\n        let new_total_result = { ...JSON.parse(total_result) };\r\n        let json_total_key_words = { ...JSON.parse(total_key_words) };\r\n        let result = {}, new_links;\r\n        for (let key in new_total_result) {\r\n            console.log(Number(key));\r\n            if (isNaN(Number(key))) {\r\n                if (!result[stem(key)]) {\r\n                    result[stem(key)] = { count: 0, links: [] }\r\n\r\n                }\r\n\r\n                // result[stem(key)].count += new_total_result[key].count;\r\n                new_links = result[stem(key)].links;\r\n                new_total_result[key].links.forEach(element_new_link => {\r\n                    if (!this.checkLinks(new_links, element_new_link.link)) {\r\n                        result[stem(key)].count += element_new_link.count;\r\n                        new_links.push(element_new_link);\r\n                    }\r\n                });\r\n                result[stem(key)].links = new_links;\r\n            }\r\n\r\n        }\r\n        let element\r\n\r\n\r\n        // json_total_key_words.forEach(element => {\r\n        for (let i in json_total_key_words) {\r\n            element = json_total_key_words[i];\r\n            element.keys.forEach(key => {\r\n                if (!result[key]) {\r\n                    result[key] = { count: 0, links: [] }\r\n                }\r\n                new_links = result[key].links;\r\n                element.links.forEach(link_obj => {\r\n                    if (!this.checkLinks(new_links, link_obj.link)) {\r\n                        result[key].count += 100;\r\n                        new_links.push({ count: 100, count_documents: 1, link: link_obj.link });\r\n                    }\r\n                });\r\n                result[key].links = new_links;\r\n            });\r\n        }\r\n\r\n\r\n        // });\r\n        fs.writeFile('./server/data/total_result.json', JSON.stringify(result), function (error) {\r\n            if (error) {\r\n                return { result: false, message: \"Не удалось записать файл с данными для обучения. (new_total_result.json)\" };\r\n            }// если возникла ошибка\r\n\r\n        });\r\n    }\r\n    checkLinks(cache_links, link) {\r\n        let result = false;\r\n        cache_links.forEach(element => {\r\n            if (element.link == link) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result\r\n    }\r\n}\r\n"]}