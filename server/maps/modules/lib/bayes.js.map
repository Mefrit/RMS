{"version":3,"sources":["../../source/nodeserver/modules/lib/bayes.ts"],"names":[],"mappings":";;;AAAA,uCAAiC;AACjC,6CAAiC;AAIjC,MAAa,KAAK;IAGd,YAAY,KAAK;IAEjB,CAAC;IACD,kBAAkB,CAAC,MAAM,EAAE,cAAc;QACrC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QACvD,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACrC,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,OAAO,IAAI,EAAE,EAAE;gBACxD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAItC,CAAC;IACD,aAAa,CAAC,GAAG;QACb,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC;QAEzB,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;gBACjB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACb;iBAAM;gBACH,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;aACrB;YACD,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;SACjB;QAED,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB,CAAC;IACD,aAAa;QACT,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAEvC,CAAC,CAAC,CAAC;IACP,CAAC;IACD,eAAe,CAAC,GAAG;QACf,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACpB,IAAI,IAAI,IAAI,EAAE,EAAE;gBACZ,OAAO,IAAA,cAAI,EAAC,IAAI,CAAC,CAAC;aACrB;QAGL,CAAC,CAAC,CAAC;IACP,CAAC;IACD,aAAa,CAAC,MAAc,EAAE,UAAiB,EAAE,eAAe;QAC5D,MAAM,cAAc,GAAG;YACnB,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,IAAI;YACJ,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,OAAO;YACP,GAAG;YACH,GAAG;YACH,GAAG;YACH,MAAM;SACT,CAAC;QACF,IAAI,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE,GAAG,EAAE,kBAAkB,CAAC;QAC3F,IAAI,SAAS,GAAG,KAAK,EACjB,SAAS,GAAG,EAAE,CAAC;QACnB,MAAM,YAAY,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAInL,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAEhD,CAAC,WAAW,EAAE,kBAAkB,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAEpE,IAAI,gBAAgB,EAAE,mBAAmB,CAAC;QAC1C,MAAM,eAAe,GAAG,gBAAE,CAAC,YAAY,CAAC,oCAAoC,CAAC,CAAC;QAC9E,MAAM,YAAY,GAAG,gBAAE,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAC;QAGxE,IAAI,CAAC,YAAY,IAAI,CAAC,eAAe,EAAE;YACnC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,oDAAoD,EAAE,CAAC;SAC3F;QACD,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;QAChD,IAAI;YACA,mBAAmB,qBAAQ,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAE,CAAC;YACzD,gBAAgB,qBAAQ,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAE,CAAC;YAGnD,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAEvB,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;oBAGlC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;wBACzB,GAAG,GAAG,EAAE,CAAC;wBACT,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;wBACd,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;wBACf,gBAAgB,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;qBAChC;oBACD,SAAS,GAAG,EAAE,CAAC;oBACf,eAAe,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;wBAC9C,SAAS,GAAG,KAAK,CAAC;wBAGlB,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;4BAEpD,IAAI,gBAAgB,CAAC,IAAI,IAAI,SAAS,EAAE;gCAEpC,gBAAgB,CAAC,KAAK,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;gCAAA,CAAC;gCACrD,gBAAgB,CAAC,eAAe,IAAI,CAAC,CAAC;gCAEtC,SAAS,GAAG,IAAI,CAAC;gCAGjB,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;gCAC1D,IAAI,mBAAmB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;oCACpD,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;iCAC5C;6BACJ;4BACD,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;wBAErC,CAAC,CAAC,CAAC;wBAEH,IAAI,CAAC,SAAS,EAAE;4BACZ,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;4BACvC,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,EAAE;gCACnF,mBAAmB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;6BAEvC;4BAED,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAE1C,GAAG,GAAG,EAAE,CAAC;4BACT,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;4BACd,GAAG,CAAC,eAAe,GAAG,CAAC,CAAC;4BACxB,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC;4BAErB,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BACpB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;4BACvB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;4BACpB,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;yBACrC;oBACL,CAAC,CAAC,CAAC;oBACH,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;iBAE5C;YAKL,CAAC,CAAC,CAAC;YACH,gBAAE,CAAC,SAAS,CAAC,0CAA0C,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,UAAU,KAAK;gBACtG,IAAI,KAAK,EAAE;oBACP,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,0EAA0E,EAAE,CAAC;iBACjH;YAEL,CAAC,CAAC,CAAC;YACH,gBAAE,CAAC,SAAS,CAAC,yCAAyC,EAAE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,EAAE,UAAU,KAAK;gBACxG,IAAI,KAAK,EAAE;oBACP,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,yEAAyE,EAAE,CAAC;iBAChH;YAEL,CAAC,CAAC,CAAC;YACH,OAAO,WAAW,CAAA;SAErB;QAAC,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YACzB,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,qDAAqD,GAAG,GAAG,EAAE,CAAC;SAClG;IA4DL,CAAC;CACJ;AAlPD,sBAkPC","file":"../../../modules/lib/bayes.js","sourcesContent":["import { stem } from \"./stemmer\";\r\nimport { fs } from \"file-system\";\r\n// import * as total_links_inf from 'server/data/total_links_inf.json'\r\n// var json = require('./server/data/total_links_inf.json');\r\n\r\nexport class Bayes {\r\n    cache_elements: string[];\r\n    links_docs: any[];\r\n    constructor(path2) {\r\n\r\n    }\r\n    getWordsFromLetter(letter, cache_elements) {\r\n        letter = letter.toLowerCase();\r\n        letter = letter.replace(/<\\/?[a-zA-Z]+>/gi, \"\").trim();\r\n        letter = letter.replace(/\\s+/g, \" \");\r\n        let result = [];\r\n\r\n        letter.split(\"\").forEach((element) => {\r\n            if (cache_elements.indexOf(element) == -1 && element != \"\") {\r\n                result.push(element);\r\n            }\r\n        });\r\n\r\n        return result.join(\"\").split(\" \");\r\n        // if (this.cache_elements.indexOf(letter[i]) != -1) {\r\n        //     letter[i] = \"\";\r\n        // }\r\n    }\r\n    countElements(arr) {\r\n        var a = [], b = [], prev;\r\n\r\n        arr.sort();\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] !== prev) {\r\n                a.push(arr[i]);\r\n                b.push(1);\r\n            } else {\r\n                b[b.length - 1]++;\r\n            }\r\n            prev = arr[i];\r\n        }\r\n\r\n        return [a, b];\r\n    }\r\n    loadTrainData() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n        });\r\n    }\r\n    getStemElements(arr) {\r\n        return arr.map((elem) => {\r\n            if (elem != '') {\r\n                return stem(elem);\r\n            }\r\n\r\n            // console.log(\"stemfer\", stemfer.russian(elem));\r\n        });\r\n    }\r\n    trainByLetter(letter: string, links_docs: any[], user_docs_links) {\r\n        const cache_elements = [\r\n            \"-\",\r\n            '\"',\r\n            \"'\",\r\n            \"!\",\r\n            \"№\",\r\n            \"?\",\r\n            \".\",\r\n            \"(\",\r\n            \")\",\r\n            \"/\",\r\n            \"\\\\\",\r\n            \"<\",\r\n            \">\",\r\n            \",\",\r\n            \";\",\r\n            \"&quot\",\r\n            \"—\",\r\n            \"«\",\r\n            \"»\",\r\n            \"/s+/\",\r\n        ];\r\n        let cache_words = this.getWordsFromLetter(letter, cache_elements), tmp, cache_counts_words;\r\n        let find_link = false,\r\n            new_links = [];\r\n        const prepositions = [\"по\", \"\", \"из\", \"на\", \"в\", \"а\", \"при\", \"также\", \"но\", \"вы\", \"об\", \"как\", \"не\", \"или\", \"пожалуйста\", \"да\", \"для\", \"того\", \"чтобы\", \"это\", \"же\", \"так\", \"ваш\"];\r\n\r\n        // console.log(\"links_docs\", links_docs);\r\n        // cache_words = [\"аленушка\"];\r\n        cache_words = this.getStemElements(cache_words);\r\n\r\n        [cache_words, cache_counts_words] = this.countElements(cache_words);\r\n        //получить ссылки\r\n        let new_total_result, new_total_links_inf;\r\n        const total_links_inf = fs.readFileSync('./server/data/total_links_inf.json');\r\n        const total_result = fs.readFileSync('./server/data/total_result.json');\r\n\r\n        // fs.readFile(\"./server/data/total_result.json\", \"utf8\", (err, jsonString) => {\r\n        if (!total_result || !total_links_inf) {\r\n            return { result: false, message: \"Не удалось загрузить файл с данными для обучения. \" };\r\n        }\r\n        console.log(\"user_docs_links\", user_docs_links);\r\n        try {\r\n            new_total_links_inf = { ...JSON.parse(total_links_inf) };\r\n            new_total_result = { ...JSON.parse(total_result) };\r\n            // console.log(\"Load File cache_words\", cache_words);\r\n\r\n            cache_words.forEach(word => {\r\n\r\n                if (prepositions.indexOf(word) == -1) {\r\n\r\n                    // new_file[elem].links.forEach(link_elem => {\r\n                    if (!new_total_result[word]) {\r\n                        tmp = {};\r\n                        tmp.count = 0;\r\n                        tmp.links = [];\r\n                        new_total_result[word] = tmp;\r\n                    }\r\n                    new_links = [];\r\n                    user_docs_links.forEach((user_link, index, arr) => {\r\n                        find_link = false;\r\n\r\n                        // console.log(\"new_file[elem].link\", word, new_total_result[word]);\r\n                        new_total_result[word].links.forEach(elem_link_result => {\r\n                            // console.log(\"letter_link\", letter_link);\r\n                            if (elem_link_result.link == user_link) {\r\n\r\n                                elem_link_result.count += cache_counts_words[index];;\r\n                                elem_link_result.count_documents += 1;\r\n\r\n                                find_link = true;\r\n                                // console.log(\"!!!!!!!!!!! \", elem, cache_counts_words[index]);\r\n\r\n                                new_total_result[word].count += cache_counts_words[index];\r\n                                if (new_total_links_inf[user_link].indexOf(word) == -1) {\r\n                                    new_total_links_inf[user_link].push(word)\r\n                                }\r\n                            }\r\n                            new_links.push(elem_link_result);\r\n\r\n                        });\r\n\r\n                        if (!find_link) {\r\n                            console.log(\"Not Find new word\", word);\r\n                            if (!new_total_links_inf[user_link] || !Array.isArray(new_total_links_inf[user_link])) {\r\n                                new_total_links_inf[user_link] = [];\r\n\r\n                            }\r\n\r\n                            new_total_links_inf[user_link].push(word);\r\n\r\n                            tmp = {};\r\n                            tmp.count = 1;\r\n                            tmp.count_documents = 1;\r\n                            tmp.link = user_link;\r\n\r\n                            new_links.push(tmp);\r\n                            console.log(new_links);\r\n                            console.log(\"\\n\\n\");\r\n                            new_total_result[word].count += 1;\r\n                        }\r\n                    });\r\n                    new_total_result[word].links = new_links;\r\n                    // });\r\n                }\r\n                // console.log(\"new_total_result\", new_total_result);\r\n                // console.log(json);\r\n\r\n\r\n            });\r\n            fs.writeFile('./server/data/new_total_result_test.json', JSON.stringify(new_total_result), function (error) {\r\n                if (error) {\r\n                    return { result: false, message: \"Не удалось записать файл с данными для обучения. (new_total_result.json)\" };\r\n                }// если возникла ошибка\r\n\r\n            });\r\n            fs.writeFile('./server/data/total_links_inf_test.json', JSON.stringify(new_total_links_inf), function (error) {\r\n                if (error) {\r\n                    return { result: false, message: \"Не удалось записать файл с данными для обучения. (total_links_inf.json)\" };\r\n                }// если возникла ошибка\r\n\r\n            });\r\n            return \"somethink\"\r\n            // => \"Customer address is: Infinity Loop Drive\"\r\n        } catch (err) {\r\n            console.log(\"errr\", err);\r\n            return { result: false, message: \"Не удалось обработать файл с данными для обучения. \" + err };\r\n        }\r\n        // });\r\n        // console.log(\"links_docs=> \", links_docs);\r\n        // cache_words.forEach(elem => {\r\n        //     if (prepositions.indexOf(elem) == -1) {\r\n        //         //\r\n        //     }\r\n        // });\r\n        // $article = preg_replace('|[\\s]+|s', ' ', mb_strtolower($article));\r\n        // $article = explode(' ', $article);\r\n        // $article = array_filter(array_count_values($article), function($v){\r\n        //     return $v > 0;\r\n        // });\r\n        // $new_result = [];\r\n\r\n        // foreach($article as $word=>$count){\r\n\r\n        //     if(strlen($word) > 2 && !in_array($word, $prepositions)){\r\n\r\n        //         $word = $stemmer->russian($word);\r\n\r\n        //         if(!array_key_exists($word,$total_result)){\r\n        //             $tmp = new StdClass();\r\n        //             $tmp->count = 0;\r\n\r\n        //             $tmp->links = [];\r\n        //             $total_result[$word] = $tmp;\r\n        //         }\r\n        //         foreach($elem->links as $link_from_letter){\r\n        //             $find_link = false;\r\n        //             $new_links = [];\r\n        //             foreach(  $total_result[$word]->links as $elem_link_result){\r\n        //                 $elem_link_result = (array)$elem_link_result;\r\n        //                 if($elem_link_result['link'] == $link_from_letter){\r\n        //                     $elem_link_result['count_documents'] += 1;\r\n        //                     $elem_link_result['count'] += $count;\r\n        //                     $find_link = true;\r\n        //                     $total_result[$word]->count += $count;\r\n        //                 }\r\n        //                 $new_links []= $elem_link_result;\r\n\r\n        //             }\r\n        //             if(!$find_link){\r\n        //                 if(!array_key_exists($link_from_letter, $total_links_inf)){\r\n        //                     $total_links_inf[$link_from_letter] = [];\r\n        //                 }\r\n        //                 if(!is_array($total_links_inf[$link_from_letter ])){\r\n        //                     $total_links_inf[$link_from_letter] = [];\r\n        //                 }\r\n        //                 $tmp = new StdClass();\r\n        //                 $tmp->count = 1;\r\n        //                 $tmp->count_documents = 1;\r\n        //                 $tmp->link = $link_from_letter;\r\n        //                 $new_links []=  $tmp;\r\n        //                 $total_result[$word]->count += 1;\r\n        //             }\r\n        //         }\r\n        //         $total_result[$word]->links = $new_links ;\r\n        //     }\r\n        // }\r\n    }\r\n}\r\n"]}