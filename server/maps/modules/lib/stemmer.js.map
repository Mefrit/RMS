{"version":3,"sources":["../../source/nodeserver/modules/lib/stemmer.ts"],"names":[],"mappings":"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","file":"../../../modules/lib/stemmer.js","sourcesContent":["export default class Stemmer {\r\n    russian(word) {\r\n        let a = this.rv(word);\r\n        console.log(a);\r\n        let start = a[0];\r\n        let rv = a[1];\r\n        rv = this.step1(rv);\r\n        rv = this.step2(rv);\r\n        rv = this.step3(rv);\r\n        rv = this.step4(rv);\r\n        console.log(\"rv\", rv);\r\n        return start + rv;\r\n    }\r\n    rv(word) {\r\n        let vowels = [\"а\", \"е\", \"и\", \"о\", \"у\", \"ы\", \"э\", \"ю\", \"я\"],\r\n            flag = 0,\r\n            rv_str = \"\",\r\n            start = \"\";\r\n        for (let i = 0; i < word.length; i += 2) {\r\n            if (flag == 1) rv_str += word.slice(i, 2);\r\n            else start += word.slice(i, 2);\r\n            if (vowels.indexOf(word.slice(i, 2)) !== -1) flag = 1;\r\n        }\r\n        return [start, rv_str];\r\n    }\r\n    substitute(word, suffix_list) {\r\n        suffix_list.forEach((suffix) => {\r\n            if (this.has_suffix(word, suffix)) {\r\n                word = this.cut_suffix(word, suffix);\r\n            }\r\n        });\r\n\r\n        return word;\r\n    }\r\n    has_suffix(word, suffix) {\r\n        return word.slice(-suffix.length) == suffix;\r\n    }\r\n    has_aya(word, suffix) {\r\n        return word.slice(-suffix.length - 2, 2) == \"а\" || word.slice(word, -suffix.length - 2, 2) == \"я\";\r\n    }\r\n    cut_suffix(word, suffix) {\r\n        return word.slice(0, word.length - suffix.length);\r\n    }\r\n    step1(word) {\r\n        let perfective1 = [\"в\", \"вши\", \"вшись\"];\r\n\r\n        perfective1.forEach((suffix) => {\r\n            if (this.has_suffix(word, suffix) && this.has_aya(word, suffix)) {\r\n                return this.cut_suffix(word, suffix);\r\n            }\r\n        });\r\n\r\n        let perfective2 = [\"ив\", \"ивши\", \"ившись\", \"ывши\", \"ывшись\"];\r\n        perfective2.forEach((suffix) => {\r\n            if (this.has_suffix(word, suffix)) {\r\n                return this.cut_suffix(word, suffix);\r\n            }\r\n        });\r\n\r\n        let reflexive = [\"ся\", \"сь\"];\r\n        word = this.substitute(word, reflexive);\r\n\r\n        let adjective = [\r\n            \"ее\",\r\n            \"ие\",\r\n            \"ые\",\r\n            \"ое\",\r\n            \"ими\",\r\n            \"ыми\",\r\n            \"ей\",\r\n            \"ий\",\r\n            \"ый\",\r\n            \"ой\",\r\n            \"ем\",\r\n            \"им\",\r\n            \"ым\",\r\n            \"ом\",\r\n            \"его\",\r\n            \"ого\",\r\n            \"ему\",\r\n            \"ому\",\r\n            \"их\",\r\n            \"ых\",\r\n            \"ую\",\r\n            \"юю\",\r\n            \"ая\",\r\n            \"яя\",\r\n            \"ою\",\r\n            \"ею\",\r\n        ];\r\n        let participle2 = [\"ем\", \"нн\", \"вш\", \"ющ\", \"щ\"];\r\n        let participle1 = [\"ивш\", \"ывш\", \"ующ\"];\r\n        adjective.forEach((suffix) => {\r\n            console.log(word, \" suffix \", suffix);\r\n            if (this.has_suffix(word, suffix)) {\r\n                console.log(word, \" suffix \", suffix);\r\n                word = this.cut_suffix(word, suffix);\r\n\r\n                participle1.forEach((suffix) => {\r\n                    if (this.has_suffix(word, suffix) && this.has_aya(word, suffix))\r\n                        word = this.cut_suffix(word, suffix);\r\n                });\r\n                return this.substitute(word, participle2);\r\n            }\r\n        });\r\n\r\n        let verb1 = [\r\n            \"ла\",\r\n            \"на\",\r\n            \"ете\",\r\n            \"йте\",\r\n            \"ли\",\r\n            \"й\",\r\n            \"л\",\r\n            \"ем\",\r\n            \"н\",\r\n            \"ло\",\r\n            \"но\",\r\n            \"ет\",\r\n            \"ют\",\r\n            \"ны\",\r\n            \"ть\",\r\n            \"ешь\",\r\n            \"нно\",\r\n        ];\r\n\r\n        verb1.forEach((suffix) => {\r\n            if (this.has_suffix(word, suffix) && this.has_aya(word, suffix)) return this.cut_suffix(word, suffix);\r\n        });\r\n        let verb2 = [\r\n            \"ила\",\r\n            \"ыла\",\r\n            \"ена\",\r\n            \"ейте\",\r\n            \"уйте\",\r\n            \"ите\",\r\n            \"или\",\r\n            \"ыли\",\r\n            \"ей\",\r\n            \"уй\",\r\n            \"ил\",\r\n            \"ыл\",\r\n            \"им\",\r\n            \"ым\",\r\n            \"ен\",\r\n            \"ило\",\r\n            \"ыло\",\r\n            \"ено\",\r\n            \"ят\",\r\n            \"ует\",\r\n            \"уют\",\r\n            \"ит\",\r\n            \"ыт\",\r\n            \"ены\",\r\n            \"ить\",\r\n            \"ыть\",\r\n            \"ишь\",\r\n            \"ую\",\r\n            \"ю\",\r\n        ];\r\n\r\n        verb2.forEach((suffix) => {\r\n            if (this.has_suffix(word, suffix)) return this.cut_suffix(word, suffix);\r\n        });\r\n        let noun = [\r\n            \"а\",\r\n            \"ев\",\r\n            \"ов\",\r\n            \"ие\",\r\n            \"ье\",\r\n            \"е\",\r\n            \"иями\",\r\n            \"ями\",\r\n            \"ами\",\r\n            \"еи\",\r\n            \"ии\",\r\n            \"и\",\r\n            \"ией\",\r\n            \"ей\",\r\n            \"ой\",\r\n            \"ий\",\r\n            \"й\",\r\n            \"иям\",\r\n            \"ям\",\r\n            \"ием\",\r\n            \"ем\",\r\n            \"ам\",\r\n            \"ом\",\r\n            \"о\",\r\n            \"у\",\r\n            \"ах\",\r\n            \"иях\",\r\n            \"ях\",\r\n            \"ы\",\r\n            \"ь\",\r\n            \"ию\",\r\n            \"ью\",\r\n            \"ю\",\r\n            \"ия\",\r\n            \"ья\",\r\n            \"я\",\r\n        ];\r\n\r\n        noun.forEach((suffix) => {\r\n            if (this.has_suffix(word, suffix)) return this.cut_suffix(word, suffix);\r\n        });\r\n\r\n        return word;\r\n    }\r\n    step2(word) {\r\n        if (word.slice(-2, 2) == \"и\") word = word.slice(0, word.length - 2);\r\n        return word;\r\n    }\r\n    step3(word) {\r\n        let vowels = [\"а\", \"е\", \"и\", \"о\", \"у\", \"ы\", \"э\", \"ю\", \"я\"];\r\n        let flag = 0;\r\n        let r1 = \"\";\r\n        let r2 = \"\";\r\n        for (let i = 0; i < word.length; i += 2) {\r\n            if (flag == 2) r1 += word.slice(i, 2);\r\n            if (vowels.indexOf(word.slice(i, 2)) !== -1) flag = 1;\r\n            if (flag == 1 && vowels.indexOf(word.slice(i, 2)) === -1) flag = 2;\r\n        }\r\n        flag = 0;\r\n        for (let i = 0; i < r1.length; i += 2) {\r\n            if (flag == 2) r2 += r1.slice(i, 2);\r\n            if (vowels.indexOf(r1.slice(i, 2)) !== -1) flag = 1;\r\n            if (flag == 1 && vowels.indexOf(r1.slice(i, 2)) == -1) flag = 2;\r\n        }\r\n        let derivational = [\"ост\", \"ость\"];\r\n        // foreach ( derivational as  suffix)\r\n        derivational.forEach((suffix) => {\r\n            if (r2.slice(-suffix.length) == suffix) word = word.slice(0, r2.length - suffix.length);\r\n        });\r\n\r\n        return word;\r\n    }\r\n    step4(word) {\r\n        if (word.slice(-2 * 2) == \"нн\") word = word.slice(0, word.length - 2);\r\n        else {\r\n            let superlative = [\"ейш\", \"ейше\"];\r\n\r\n            superlative.forEach((suffix) => {\r\n                if (word.slice(-suffix.length) == suffix) word = word.slice(0, word.length - suffix.length);\r\n            });\r\n\r\n            if (word.slice(-2 * 2) == \"нн\") word = word.slice(0, word.length - 2);\r\n        }\r\n        // should there be a guard flag? can't think of a russian word that ends with ейшь or ннь anyways, though the algorithm states this is an \"otherwise\" case\r\n        if (word.slice(-2, 2) == \"ь\") word = word.slice(0, word.length - 2);\r\n        return word;\r\n    }\r\n}\r\n// class Stemmer {\r\n\r\n//     static public function russian( word)\r\n//     {\r\n//          a =  this.rv( word);\r\n//          start =  a[0];\r\n//          rv =  a[1];\r\n//          rv =  this.step1( rv);\r\n//          rv =  this.step2( rv);\r\n//          rv =  this.step3( rv);\r\n//          rv =  this.step4( rv);\r\n//         return  start. rv;\r\n//     }\r\n\r\n//     static private function rv( word)\r\n//     {\r\n//          vowels = array('а','е','и','о','у','ы','э','ю','я');\r\n//          flag = 0;\r\n//          rv = '';\r\n//          start = '';\r\n//         for ( i=0;  i<strlen( word);  i+=CHAR_LENGTH) {\r\n//             if ( flag==1)\r\n//                  rv .= substr( word,  i, CHAR_LENGTH);\r\n//             else\r\n//                  start .= substr( word,  i, CHAR_LENGTH);\r\n//             if (array_search(substr( word, i,CHAR_LENGTH),  vowels) !== false)\r\n//                  flag=1;\r\n//         }\r\n//         return array( start, rv);\r\n//     }\r\n\r\n//     static function substitute ( word, & suffix_list)\r\n//     {\r\n//         foreach ( suffix_list as  suffix) {\r\n//             if ( this.has_suffix( word,  suffix)) {\r\n//                 word =  this.cut_suffix( word,  suffix);\r\n//             }\r\n//         }\r\n//         return  word;\r\n//     }\r\n\r\n//     static function has_suffix ( word,  suffix)\r\n//     {\r\n//         return substr( word, -(strlen( suffix))) ==  suffix;\r\n//     }\r\n\r\n//     static function has_aya ( word,  suffix)\r\n//     {\r\n//         return (substr( word,-strlen( suffix)-CHAR_LENGTH,CHAR_LENGTH)=='а' || substr( word,-strlen( suffix)-CHAR_LENGTH,CHAR_LENGTH)=='я');\r\n//     }\r\n\r\n//     static function cut_suffix ( word,  suffix)\r\n//     {\r\n//         return substr( word, 0, strlen( word) - strlen( suffix));\r\n//     }\r\n\r\n//     static private function step1( word)\r\n//     {\r\n//          perfective1 = array('в', 'вши', 'вшись');\r\n//         foreach ( perfective1 as  suffix) {\r\n//             if ( this.has_suffix( word,  suffix) &&  this.has_aya ( word,  suffix)) {\r\n//                 return  this.cut_suffix( word,  suffix);\r\n//             }\r\n//         }\r\n\r\n//          perfective2 = array('ив','ивши','ившись','ывши','ывшись');\r\n//         foreach ( perfective2 as  suffix) {\r\n//             if ( this.has_suffix( word,  suffix)) {\r\n//                 return  this.cut_suffix( word,  suffix);\r\n//             }\r\n//         }\r\n\r\n//          reflexive = array('ся', 'сь');\r\n//          word =  this.substitute( word,  reflexive);\r\n\r\n//          adjective = array('ее','ие','ые','ое','ими','ыми','ей','ий','ый','ой','ем','им','ым','ом','его','ого','ему','ому','их','ых','ую','юю','ая','яя','ою','ею');\r\n//          participle2 = array('ем','нн','вш','ющ','щ');\r\n//          participle1 = array('ивш','ывш','ующ');\r\n//         foreach ( adjective as  suffix) {\r\n//             if ( this.has_suffix( word,  suffix)) {\r\n//                  word =  this.cut_suffix( word,  suffix);\r\n\r\n//                 foreach ( participle1 as  suffix)\r\n//                     if ( this.has_suffix( word,  suffix) &&  this.has_aya ( word,  suffix))\r\n//                          word =  this.cut_suffix( word,  suffix);\r\n\r\n//                 return  this.substitute( word,  participle2);\r\n//             }\r\n//         }\r\n\r\n//          verb1 = array('ла','на','ете','йте','ли','й','л','ем','н','ло','но','ет','ют','ны','ть','ешь','нно');\r\n//         foreach ( verb1 as  suffix)\r\n//             if ( this.has_suffix( word,  suffix) &&  this.has_aya ( word,  suffix))\r\n//                 return  this.cut_suffix( word,  suffix);\r\n\r\n//          verb2 = array('ила','ыла','ена','ейте','уйте','ите','или','ыли','ей','уй','ил','ыл','им','ым','ен','ило','ыло','ено','ят','ует','уют','ит','ыт','ены','ить','ыть','ишь','ую','ю');\r\n//         foreach ( verb2 as  suffix)\r\n//             if ( this.has_suffix( word,  suffix))\r\n//             return  this.cut_suffix( word,  suffix);\r\n\r\n//          noun = array('а','ев','ов','ие','ье','е','иями','ями','ами','еи','ии','и','ией','ей','ой','ий','й','иям','ям','ием','ем','ам','ом','о','у','ах','иях','ях','ы','ь','ию','ью','ю','ия','ья','я');\r\n//         foreach ( noun as  suffix) {\r\n//             if ( this.has_suffix( word,  suffix))\r\n//                return  this.cut_suffix( word,  suffix);\r\n//         }\r\n\r\n//         return  word;\r\n//     }\r\n\r\n//     static private function step2( word)\r\n//     {\r\n//         if (substr( word,-CHAR_LENGTH,CHAR_LENGTH) == 'и')\r\n//              word = substr( word, 0, strlen( word)-CHAR_LENGTH);\r\n//         return  word;\r\n//     }\r\n\r\n//     static private function step3( word)\r\n//     {\r\n//          vowels = array('а','е','и','о','у','ы','э','ю','я');\r\n//          flag = 0;\r\n//          r1 = '';\r\n//          r2 = '';\r\n//         for ( i=0;  i<strlen( word);  i+=CHAR_LENGTH)\r\n//         {\r\n//             if ( flag==2)\r\n//                  r1.=substr( word,  i, CHAR_LENGTH);\r\n//             if (array_search(substr( word, i,CHAR_LENGTH),  vowels) !== false)\r\n//                  flag=1;\r\n//             if ( flag=1 && array_search(substr( word, i,CHAR_LENGTH),  vowels) === false)\r\n//                  flag=2;\r\n//         }\r\n//          flag=0;\r\n//         for ( i=0;  i<strlen( r1);  i+=CHAR_LENGTH)\r\n//         {\r\n//             if ( flag==2)\r\n//                  r2.=substr( r1,  i, CHAR_LENGTH);\r\n//             if (array_search(substr( r1, i,CHAR_LENGTH),  vowels) !== false)\r\n//                  flag=1;\r\n//             if ( flag=1 && array_search(substr( r1, i,CHAR_LENGTH),  vowels) === false)\r\n//                  flag=2;\r\n//         }\r\n//          derivational=array('ост', 'ость');\r\n//         foreach ( derivational as  suffix)\r\n//             if (substr( r2,-(strlen( suffix))) ==  suffix)\r\n//                  word=substr( word, 0, strlen( r2)-strlen( suffix));\r\n//         return  word;\r\n//     }\r\n\r\n//     static private function step4( word)\r\n//     {\r\n//         if (substr( word,-CHAR_LENGTH*2)=='нн')\r\n//              word=substr( word, 0, strlen( word)-CHAR_LENGTH);\r\n//         else\r\n//         {\r\n//              superlative=array('ейш', 'ейше');\r\n//             foreach ( superlative as  suffix)\r\n//                 if (substr( word,-(strlen( suffix))) ==  suffix)\r\n//                  word = substr( word, 0, strlen( word) - strlen( suffix));\r\n//             if (substr( word,-CHAR_LENGTH*2) == 'нн')\r\n//                  word = substr( word, 0, strlen( word) - CHAR_LENGTH);\r\n//         }\r\n//         // should there be a guard flag? can't think of a russian word that ends with ейшь or ннь anyways, though the algorithm states this is an \"otherwise\" case\r\n//         if (substr( word,-CHAR_LENGTH,CHAR_LENGTH) == 'ь')\r\n//              word=substr( word, 0, strlen( word)-CHAR_LENGTH);\r\n//         return  word;\r\n//     }\r\n// }\r\n"]}