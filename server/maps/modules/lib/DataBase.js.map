{"version":3,"sources":["../../source/nodeserver/modules/lib/DataBase.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;AAC7C,2BAA4B;AAC5B,MAAa,QAAQ;IAGjB;QACI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;IAC5B,CAAC;IACK,YAAY,CAAC,OAAO;;YACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,SAAS,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;oBACnD,IAAI,GAAG,EAAE;wBACL,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,wCAAwC,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;qBAC/F;oBACD,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IACK,SAAS,CAAC,WAAW;;YACvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,MAAM,MAAM,GAAG,IAAI,WAAM,CAAC,WAAW,CAAC,CAAC;gBACvC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACjB,IAAI,MAAM,EAAE;oBACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;iBAC7B;gBACD,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,iDAAiD,EAAE,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IACD,aAAa;QACT,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACzB,IAAI,GAAG,EAAE;gBACL,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,mCAAmC,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;aACxF;YACD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IACD,QAAQ;QACJ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IACD,WAAW;QACP,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;CACJ;AA3CD,4BA2CC","file":"../../../modules/lib/DataBase.js","sourcesContent":["const sqlite3 = require(\"sqlite3\").verbose();\r\nimport { Client } from \"pg\";\r\nexport class DataBase {\r\n    db_sqlite: any;\r\n    db_cis: any;\r\n    constructor() {\r\n        this.db_sqlite = undefined;\r\n        this.db_cis = undefined;\r\n    }\r\n    async initDBSqlite(path2db) {\r\n        return new Promise((resolve, reject) => {\r\n            this.db_sqlite = new sqlite3.Database(path2db, (err) => {\r\n                if (err) {\r\n                    resolve({ result: false, message: \"Ошибка при подключении к базе данных. \" + err.message });\r\n                }\r\n                resolve({ result: true });\r\n            });\r\n        });\r\n    }\r\n    async initDBCis(cis_connect) {\r\n        return new Promise((resolve, reject) => {\r\n            const client = new Client(cis_connect);\r\n            client.connect();\r\n            if (client) {\r\n                this.db_cis = client;\r\n                resolve({ result: true });\r\n            }\r\n            resolve({ result: false, message: \"Не удалось подключитсья к базе данных Postgress\" });\r\n        });\r\n    }\r\n    closeDBSqlite() {\r\n        this.db_sqlite.close((err) => {\r\n            if (err) {\r\n                return { result: false, message: \"Ошибка при закрытии базы данных. \" + err.message };\r\n            }\r\n            return { result: true };\r\n        });\r\n        this.db_sqlite = undefined;\r\n    }\r\n    getDBCis() {\r\n        return this.db_cis;\r\n    }\r\n    getDBSqlite() {\r\n        return this.db_sqlite;\r\n    }\r\n}\r\n"]}