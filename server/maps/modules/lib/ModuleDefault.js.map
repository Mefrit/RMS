{"version":3,"sources":["../../source/nodeserver/modules/lib/ModuleDefault.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAa,cAAc;IAGvB,YAAY,KAAK;QAQjB,qBAAgB,GAAG,CAAO,QAAQ,EAAE,GAAG,EAAE,EAAE;YAEvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;oBAC7B,IAAI,GAAG,EAAE;wBACL,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;qBACpD;oBAED,IAAI,GAAG,EAAE;wBACL,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;qBAC7C;yBAAM;wBACH,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;qBACvC;oBAED,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACnB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAA,CAAC;QACF,wBAAmB,GAAG,CAAO,QAAQ,EAAE,GAAG,EAAE,EAAE;YAE1C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,IAAI;wBACjC,IAAI,GAAG,EAAE;4BACL,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;yBACpD;wBACD,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAA,CAAC;QArCE,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;IACvB,CAAC;IAED,UAAU,CAAC,WAAW,EAAE,IAAI;QACxB,OAAO,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;CAiCJ;AA1CD,wCA0CC","file":"../../../modules/lib/ModuleDefault.js","sourcesContent":["export class Module_Default {\r\n    db: any;\r\n    db_cis: any;\r\n    constructor(props) {\r\n        this.db = props.db;\r\n    }\r\n    // все актион связанные с БД возвращают Promise?\r\n    runtAction(name_action, data) {\r\n        return this[\"action\" + name_action](data);\r\n    }\r\n\r\n    makeRequestCisDB = async (database, sql) => {\r\n        // await ...\r\n        return new Promise((resolve, reject) => {\r\n            database.query(sql, (err, res) => {\r\n                if (err) {\r\n                    resolve({ result: false, message: err.message });\r\n                }\r\n\r\n                if (res) {\r\n                    resolve({ result: true, rows: res.rows });\r\n                } else {\r\n                    resolve({ result: true, rows: [] });\r\n                }\r\n\r\n                database.end();\r\n            });\r\n        });\r\n    };\r\n    makeRequestSqliteDB = async (database, sql) => {\r\n        // await ...\r\n        return new Promise((resolve, reject) => {\r\n            database.serialize(() => {\r\n                database.all(sql, function (err, rows) {\r\n                    if (err) {\r\n                        resolve({ result: false, message: err.message });\r\n                    }\r\n                    resolve({ result: true, rows: rows });\r\n                });\r\n            });\r\n        });\r\n    };\r\n}\r\n"]}