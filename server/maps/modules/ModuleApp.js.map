{"version":3,"sources":["../../source/nodeserver/modules/ModuleApp.ts"],"names":[],"mappings":";;;AAAA,uDAAqD;AAErD,MAAa,UAAW,SAAQ,8BAAc;IAA9C;;QACI,kBAAa,GAAG,CAAC,SAAc,EAAE,EAAE;YAC/B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;gBACvC,MAAM,iBAAiB,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC;gBACnE,MAAM,kBAAkB,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC;gBAC9D,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,QAAQ,CAAC,GAAG,CACR,oFAAoF,SAAS,CAAC,KAAK,UAAU,iBAAiB,MAAM,kBAAkB,EAAE,EACxJ,UAAU,GAAG,EAAE,IAAI;wBACf,IAAI,GAAG,EAAE;4BACL,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;yBAC9D;wBAED,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC1C,CAAC,CACJ,CAAC;gBACN,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QACF,qBAAgB,GAAG,CAAC,SAAc,EAAE,EAAE;YAClC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;gBACvC,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;gBAE1C,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,QAAQ,CAAC,GAAG,CACR,qDAAqD,WAAW,EAAE,EAAE,UAAU,GAAG,EAAE,IAAI;wBACnF,IAAI,GAAG,EAAE;4BACL,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;yBACpD;wBACD,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC1D,CAAC,CACJ,CAAC;gBAEN,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IACN,CAAC;CAAA;AAtCD,gCAsCC","file":"../../modules/ModuleApp.js","sourcesContent":["import { Module_Default } from \"./lib/ModuleDefault\";\r\n\r\nexport class Module_App extends Module_Default {\r\n    actionGetList = (post_data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            const numb_record_start = (post_data.page - 1) * post_data.on_page;\r\n            const numb_record_finish = post_data.page * post_data.on_page;\r\n            database.serialize(() => {\r\n                database.all(\r\n                    `SELECT  id_question,question,time_receipt,time_answering FROM questions ORDER BY ${post_data.order} LIMIT ${numb_record_start} , ${numb_record_finish}`,\r\n                    function (err, rows) {\r\n                        if (err) {\r\n                            resolve({ result: false, list: [], message: err.message });\r\n                        }\r\n\r\n                        resolve({ result: true, list: rows });\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    };\r\n    actionGetMessage = (post_data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            const id_question = post_data.id_question;\r\n\r\n            database.serialize(() => {\r\n                database.all(\r\n                    `SELECT  question FROM questions WHERE id_question=${id_question}`, function (err, rows) {\r\n                        if (err) {\r\n                            resolve({ result: false, message: err.message });\r\n                        }\r\n                        resolve({ result: true, question: rows[0].question });\r\n                    }\r\n                );\r\n\r\n            });\r\n        });\r\n    };\r\n}\r\n"]}