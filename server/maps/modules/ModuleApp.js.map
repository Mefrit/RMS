{"version":3,"sources":["../../source/nodeserver/modules/ModuleApp.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uDAAqD;AAErD,MAAa,UAAW,SAAQ,8BAAc;IAA9C;;QACI,kBAAa,GAAG,CAAC,SAAc,EAAE,EAAE;YAC/B,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;gBACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;gBACvC,MAAM,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;gBAElC,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;gBAElC,MAAM,SAAS,GAAQ,MAAM,IAAI,CAAC,mBAAmB,CACjD,QAAQ,EACR,kHAAkH,SAAS,CAAC,KAAK,eAAe,CAAC,KAAK,OAAO,GAAG,CAAC,EAAE,CACtK,CAAC;gBACF,IAAI,gBAAgB,GAAG,EAAE,CAAC;gBAC1B,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC1B,IAAI,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,EAAE;wBACtD,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;qBAC9C;gBACL,CAAC,CAAC,CAAA;gBACF,MAAM,gBAAgB,GAAQ,MAAM,IAAI,CAAC,gBAAgB,CACrD,MAAM,EACN,oFAAoF,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CACrH,CAAC;gBAGF,IAAI,SAAS,CAAC,MAAM,IAAI,gBAAgB,CAAC,MAAM,EAAE;oBAC7C,IAAI,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;oBACpE,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,GAAG,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,CAAC;iBACtG;qBAAM;oBACH,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,GAAG,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;iBAC7G;YACL,CAAC,CAAA,CAAC,CAAC;QACP,CAAC,CAAC;QAYF,2BAAsB,GAAG,CAAC,SAAc,EAAE,EAAE;YACxC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;gBACvC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,QAAQ,CAAC,GAAG,CAAC,uIAAuI,EAChJ,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,YAAY,EAAE,SAAS,CAAC,eAAe,EAAE,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,YAAY,EAAE,SAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;wBAChK,IAAI,GAAG,EAAE;4BACL,OAAO,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,gCAAgC,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;yBAC7F;wBACD,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAA;oBAC7B,CAAC,CAAC,CAAA;gBACV,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAA;QACD,qBAAgB,GAAG,CAAC,SAAc,EAAE,EAAE;YAClC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;gBACvC,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;gBAC1C,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,QAAQ,CAAC,GAAG,CACR,qDAAqD,WAAW,EAAE,EAAE,UAAU,GAAG,EAAE,IAAI;wBACnF,IAAI,GAAG,EAAE;4BACL,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;yBACpD;wBACD,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC1D,CAAC,CACJ,CAAC;gBAEN,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IACN,CAAC;IA3CG,oBAAoB,CAAC,kBAAkB;QACnC,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAEjC,IAAI,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,UAAU,EAAE;gBAC/C,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,UAAU,CAAA;aAC7D;QAEL,CAAC,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;IACxB,CAAC;CAiCJ;AA3ED,gCA2EC","file":"../../modules/ModuleApp.js","sourcesContent":["import { Module_Default } from \"./lib/ModuleDefault\";\r\n\r\nexport class Module_App extends Module_Default {\r\n    actionGetList = (post_data: any) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            const db_cis = this.db.getDBCis();\r\n            // const numb_record_start = (post_data.page - 1) * post_data.on_page;\r\n            const on_page = post_data.on_page;\r\n\r\n            const questions: any = await this.makeRequestSqliteDB(\r\n                database,\r\n                `SELECT  id_question,question,time_receipt,time_answering,num_question, id_organization FROM questions ORDER BY ${post_data.order} DESC LIMIT ${0}, ${on_page + 6}`\r\n            );\r\n            let id_organizations = [];\r\n            questions.rows.forEach(elem => {\r\n                if (id_organizations.indexOf(elem.id_organization) == -1) {\r\n                    id_organizations.push(elem.id_organization)\r\n                }\r\n            })\r\n            const organizations_db: any = await this.makeRequestCisDB(\r\n                db_cis,\r\n                `SELECT short_name, id_organization FROM k_organization WHERE id_organization IN (${id_organizations.join(\",\")}) `\r\n            );\r\n\r\n\r\n            if (questions.result && organizations_db.result) {\r\n                let organzations = this.prepareOrganizations(organizations_db.rows);\r\n                resolve({ result: true, list: questions.rows, on_page: on_page + 6, organizations: organzations });\r\n            } else {\r\n                resolve({ result: false, list: [], message: questions.message, on_page: on_page + 6, organizations: [] });\r\n            }\r\n        });\r\n    };\r\n    prepareOrganizations(organizations_info) {\r\n        let organzations = {};\r\n        organizations_info.forEach(element => {\r\n\r\n            if (element.id_organization && element.short_name) {\r\n                organzations[element.id_organization] = element.short_name\r\n            }\r\n\r\n        });\r\n        return organzations;\r\n    }\r\n    actionSetQuestionToRms = (post_data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            resolve({ result: true });\r\n            const database = this.db.getDBSqlite();\r\n            database.serialize(() => {\r\n                database.run('INSERT INTO questions(question, time_receipt, id_organization, type_platform, num_question,email_questioner) VALUES(?, ?, ?, ?, ?, ?)',\r\n                    [post_data.question, post_data.time_receipt, post_data.id_organization, post_data.type_platform, post_data.num_question, post_data.email_questioner], (err, rows) => {\r\n                        if (err) {\r\n                            return resolve({ result: false, message: \"Не удалось добавить обращение.\" + err.message })\r\n                        }\r\n                        resolve({ result: true })\r\n                    })\r\n            });\r\n        });\r\n    }\r\n    actionGetMessage = (post_data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            const id_question = post_data.id_question;\r\n            database.serialize(() => {\r\n                database.all(\r\n                    `SELECT  question FROM questions WHERE id_question=${id_question}`, function (err, rows) {\r\n                        if (err) {\r\n                            resolve({ result: false, message: err.message });\r\n                        }\r\n                        resolve({ result: true, question: rows[0].question });\r\n                    }\r\n                );\r\n\r\n            });\r\n        });\r\n    };\r\n}\r\n"]}