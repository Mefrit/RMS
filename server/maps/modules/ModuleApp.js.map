{"version":3,"sources":["../../source/nodeserver/modules/ModuleApp.ts"],"names":[],"mappings":"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","file":"../../modules/ModuleApp.js","sourcesContent":["import { Module_Default } from \"./lib/ModuleDefault\";\r\n\r\nexport class Module_App extends Module_Default {\r\n    getSqlSearchObj = (search_url_params: any) => {\r\n        let result = { sqlite_filter: \"\", cis_filter: \"\" };\r\n        switch (search_url_params.search_mode) {\r\n            case \"organizations\":\r\n                if (search_url_params.search_str != \"\")\r\n                    result.cis_filter = ` AND  lower(short_name) LIKE '%${search_url_params.search_str.toLowerCase()}%'`;\r\n                break;\r\n            case \"num_question\":\r\n                if (search_url_params.search_str != \"\")\r\n                    result.sqlite_filter = ` WHERE num_question LIKE '${search_url_params.search_str}%'`;\r\n                break;\r\n            case \"time_receipt\":\r\n                if (search_url_params.time_end) {\r\n                    result.sqlite_filter = ` WHERE time_receipt < ${search_url_params.time_end}`;\r\n                    if (search_url_params.time_start) {\r\n                        result.sqlite_filter += ` AND time_receipt > ${search_url_params.time_start}`;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    actionGetList = (post_data: any) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            const db_cis = this.db.getDBCis();\r\n            let sql_search: any = { sqlite_filter: \"\", cis_filter: \"\" };\r\n            // const numb_record_start = (post_data.page - 1) * post_data.on_page;\r\n            const on_page = post_data.on_page;\r\n            if (post_data.search_url_params) {\r\n                sql_search = this.getSqlSearchObj(post_data.search_url_params);\r\n            }\r\n            const sql_sqlite = `SELECT id_question,question,time_receipt,time_answering,num_question, id_organization FROM questions ${\r\n                sql_search.sqlite_filter\r\n            } ORDER BY ${post_data.order} LIMIT ${0}, ${on_page + 12}`;\r\n\r\n            const questions: any = await this.makeRequestSqliteDB(database, sql_sqlite);\r\n            let id_organizations = [];\r\n            questions.rows.forEach((elem) => {\r\n                if (id_organizations.indexOf(elem.id_organization) == -1) {\r\n                    id_organizations.push(elem.id_organization);\r\n                }\r\n            });\r\n            const sql_cis = `SELECT short_name, id_organization FROM k_organization WHERE id_organization IN (${id_organizations.join(\r\n                \",\"\r\n            )} ) ${sql_search.cis_filter} `;\r\n            // console.log(sql_cis);\r\n            const organizations_db: any = await this.makeRequestCisDB(db_cis, sql_cis);\r\n\r\n            console.log(\"organizations_db\", organizations_db);\r\n\r\n            if (questions.result && organizations_db.result) {\r\n                const organzations = this.prepareOrganizations(organizations_db.rows);\r\n                const list = this.mergeOrganizationsToList(organzations, questions.rows);\r\n                resolve({ result: true, list: list, on_page: on_page + 12, organizations: organzations });\r\n            } else {\r\n                resolve({\r\n                    result: false,\r\n                    list: [],\r\n                    message:\r\n                        \"Ошибка при загрузке ДБ  \" + questions.message ? questions.message : organizations_db.message,\r\n                    on_page: on_page + 12,\r\n                    organizations: [],\r\n                });\r\n            }\r\n        });\r\n    };\r\n    actionSetQuestionToRms(post_data: any) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            console.log(\"post_data set questions \", post_data);\r\n            database.run(\r\n                \"INSERT INTO questions(question, id_organization, time_receipt, email_questioner,num_question,type_platform) VALUES(?, ?, ?, ?, ?, ?)\",\r\n                [\r\n                    post_data.question,\r\n                    post_data.id_organization,\r\n                    post_data.time_receipt,\r\n                    post_data.email_questioner,\r\n                    post_data.num_question,\r\n                    post_data.type_platform,\r\n                ],\r\n                (err, rows) => {\r\n                    if (err) {\r\n                        return resolve({\r\n                            result: false,\r\n                            message: \"Не удалось добавить обращение в систему.\" + err.message,\r\n                        });\r\n                    }\r\n                    return resolve({ result: true });\r\n                }\r\n            );\r\n        });\r\n    }\r\n    mergeOrganizationsToList(organizations_info, list) {\r\n        let result = [];\r\n        list.forEach((elem) => {\r\n            if (organizations_info[elem.id_organization])\r\n                result.push({ ...elem, short_name: organizations_info[elem.id_organization].short_name });\r\n        });\r\n        return result;\r\n    }\r\n    prepareOrganizations(organizations_info) {\r\n        let organzations = {};\r\n        organizations_info.forEach((element) => {\r\n            if (element.id_organization && element.short_name) {\r\n                organzations[element.id_organization] = element.short_name;\r\n            }\r\n        });\r\n        return organzations;\r\n    }\r\n    actionGetMessage = (post_data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            const database = this.db.getDBSqlite();\r\n            const id_question = post_data.id_question;\r\n            database.serialize(() => {\r\n                database.all(`SELECT  question FROM questions WHERE id_question=${id_question}`, function (err, rows) {\r\n                    if (err) {\r\n                        resolve({ result: false, message: err.message });\r\n                    }\r\n                    resolve({ result: true, question: rows[0].question });\r\n                });\r\n            });\r\n        });\r\n    };\r\n}\r\n"]}