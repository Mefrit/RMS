{"version":3,"sources":["../../source/nodeserver/Application.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qDAAkD;AAClD,mDAAiD;AACjD,2DAAyD;AACzD,6DAA2D;AAC3D,yDAAuD;AACvD,uDAAqD;AAGrD,MAAa,WAAW;IAIpB,YAAY,aAAa,EAAE,WAAW;QAClC,IAAI,CAAC,EAAE,GAAG,IAAI,mBAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IACD,SAAS,CAAC,WAAW;QACjB,QAAQ,WAAW,EAAE;YACjB,KAAK,KAAK;gBACN,OAAO,sBAAU,CAAC;YACtB,KAAK,SAAS;gBACV,OAAO,8BAAc,CAAC;YAC1B,KAAK,UAAU;gBACX,OAAO,gCAAe,CAAC;YAC3B,KAAK,QAAQ;gBACT,OAAO,4BAAa,CAAC;YACzB,KAAK,OAAO;gBACR,OAAO,0BAAY,CAAC;YACxB;gBACI,OAAO,SAAS,CAAC;SACxB;IACL,CAAC;IACD,eAAe;QACX,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;YACzC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACnE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3D,IAAI,WAAW,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACvC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;aAC3F;iBAAM;gBACH,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;oBACrB,OAAO,CAAC,WAAW,CAAC,CAAC;iBACxB;gBACD,OAAO,CAAC,QAAQ,CAAC,CAAC;aACrB;QACL,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;IACD,UAAU,CAAC,SAAS;QAChB,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;YACzC,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,CAAC,IAA8B,EAAE,EAAE;gBAC3D,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAChD,IAAI,MAAM,EAAE;wBACR,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;wBACxC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;4BACxD,OAAO,CAAC,MAAM,CAAC,CAAC;wBACpB,CAAC,CAAC,CAAC;qBACN;yBAAM;wBACH,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,wDAAwD,EAAE,CAAC,CAAC;qBACjG;iBACJ;qBAAM;oBACH,OAAO,CAAC,IAAI,CAAC,CAAC;iBACjB;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;CACJ;AA1DD,kCA0DC","file":"../Application.js","sourcesContent":["import { DataBase } from \"./modules/lib/DataBase\";\r\nimport { Module_App } from \"./modules/ModuleApp\";\r\nimport { Module_Teacher } from \"./modules/ModuleTeacher\";\r\nimport { Module_Comments } from \"./modules/ModuleComments\";\r\nimport { Module_Answer } from \"./modules/ModuleAnswer\";\r\nimport { Module_Stats } from \"./modules/ModuleStats\";\r\n\r\nimport { cis_connect, get_db_connection_answer } from \"./interfaces/interface\";\r\nexport class Application {\r\n    db: any;\r\n    cis_connect: cis_connect;\r\n    path2dbsqlite: string;\r\n    constructor(path2dbsqlite, cis_connect) {\r\n        this.db = new DataBase();\r\n        this.path2dbsqlite = path2dbsqlite;\r\n        this.cis_connect = cis_connect;\r\n    }\r\n    getModule(module_name) {\r\n        switch (module_name) {\r\n            case \"App\":\r\n                return Module_App;\r\n            case \"Teacher\":\r\n                return Module_Teacher;\r\n            case \"Comments\":\r\n                return Module_Comments;\r\n            case \"Answer\":\r\n                return Module_Answer;\r\n            case \"Stats\":\r\n                return Module_Stats;\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n    getDbConnection() {\r\n        return new Promise(async (resolve, reject) => {\r\n            const answ_sqlite = await this.db.initDBSqlite(this.path2dbsqlite);\r\n            const answ_cis = await this.db.initDBCis(this.cis_connect);\r\n            if (answ_sqlite.result && answ_cis.result) {\r\n                resolve({ result: true, db_cis: this.db.getDBCis(), db_sqlite: this.db.getDBSqlite() });\r\n            } else {\r\n                if (!answ_sqlite.result) {\r\n                    resolve(answ_sqlite);\r\n                }\r\n                resolve(answ_cis);\r\n            }\r\n        });\r\n    }\r\n    loadModule(post_data) {\r\n        return new Promise(async (resolve, reject) => {\r\n            this.getDbConnection().then((data: get_db_connection_answer) => {\r\n                if (data.result) {\r\n                    const Module = this.getModule(post_data.module);\r\n                    if (Module) {\r\n                        const obj = new Module({ db: this.db });\r\n                        obj.runtAction(post_data.action, post_data).then((answer) => {\r\n                            resolve(answer);\r\n                        });\r\n                    } else {\r\n                        resolve({ result: false, message: \"Произошла ошибка при загрузке модуля. Модуль не найден\" });\r\n                    }\r\n                } else {\r\n                    resolve(data);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}